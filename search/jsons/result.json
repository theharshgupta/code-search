{
    "data": [
        {
            "filename": "/Users/harsh/Desktop/work/61a/codingchallenge.py",
            "function": "solution(A)",
            "docstring": "Your solution goes here."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "choose(paragraphs, select, k)",
            "docstring": "Return the Kth paragraph from PARAGRAPHS for which SELECT called on the  paragraph returns true. If there are fewer than K such paragraphs, return  the empty string."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "about(topic)",
            "docstring": "Return a select function that returns whether a paragraph contains one  of the words in TOPIC.  >>> about_dogs = about(['dog', 'dogs', 'pup', 'puppy'])  >>> choose(['Cute Dog!', 'That is a cat.', 'Nice pup!'], about_dogs, 0)  'Cute Dog!'  >>> choose(['Cute Dog!', 'That is a cat.', 'Nice pup.'], about_dogs, 1)  'Nice pup.'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "accuracy(typed, reference)",
            "docstring": "Return the accuracy (percentage of words typed correctly) of TYPED  when compared to the prefix of REFERENCE that was typed.  >>> accuracy('Cute Dog!', 'Cute Dog.')  50.0  >>> accuracy('A Cute Dog!', 'Cute Dog.')  0.0  >>> accuracy('cute Dog.', 'Cute Dog.')  50.0  >>> accuracy('Cute Dog. I say!', 'Cute Dog.')  50.0  >>> accuracy('Cute', 'Cute Dog.')  100.0  >>> accuracy('', 'Cute Dog.')  0.0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "wpm(typed, elapsed)",
            "docstring": "Return the words-per-minute (WPM) of the TYPED string."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "autocorrect(user_word, valid_words, diff_function, limit)",
            "docstring": "Returns the element of VALID_WORDS that has the smallest difference  from USER_WORD. Instead returns USER_WORD if that difference is greater  than LIMIT."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "swap_diff(start, goal, limit)",
            "docstring": "A diff function for autocorrect that determines how many letters  in START need to be substituted to create GOAL, then adds the difference in  their lengths."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "edit_diff(start, goal, limit)",
            "docstring": "A diff function that computes the edit distance from START to GOAL."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "final_diff(start, goal, limit)",
            "docstring": "A diff function. If you implement this function, it will be used."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "report_progress(typed, prompt, id, send)",
            "docstring": "Send a report of your id and progress so far to the multiplayer server."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "fastest_words_report(word_times)",
            "docstring": "Return a text description of the fastest words typed by each player."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "fastest_words(word_times, margin=1e-5)",
            "docstring": "A list of which words each player typed fastest."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "word_time(word, elapsed_time)",
            "docstring": "A data abstrction for the elapsed time that a player finished a word."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "word(word_time)",
            "docstring": "An accessor function for the word of a word_time."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "elapsed_time(word_time)",
            "docstring": "An accessor function for the elapsed time of a word_time."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "run_typing_test(topics)",
            "docstring": "Measure typing speed and accuracy on the command line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/s.py",
            "function": "run(*args)",
            "docstring": "Read in the command-line argument and calls corresponding functions."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/tests/construct_check.py",
            "function": "check(source_file, checked_funcs, disallow, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW  (an object supporting 'in') are not present in the function(s) named  CHECKED_FUNCS in SOURCE. By default, SOURCE is the contents of the  file SOURCE_FILE. CHECKED_FUNCS is either a string (indicating a single  name) or an object of some other type that supports 'in'. CHECKED_FUNCS  may contain __main__ to indicate an entire module. Prints reports of  each prohibited node and returns True iff none are found.  See ast.__dir__() for AST type names. The special node name 'Recursion'  checks for overtly recursive calls (i.e., calls of the form NAME(...) where  NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/tests/construct_check.py",
            "function": "__init__(self, disallow=())",
            "docstring": "DISALLOW is the initial default list of disallowed    node-type names."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/tests/construct_check.py",
            "function": "errors(self)",
            "docstring": "Returns the number of number of prohibited constructs found in    the last call to check."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/tests/construct_check.py",
            "function": "check(self, source_file, checked_funcs, disallow=None, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW    (an object supporting the contains test) are not present in    the function(s) named CHECKED_FUNCS in SOURCE. By default, SOURCE    is the contents of the file SOURCE_FILE. DISALLOW defaults to the    argument given to the constructor (and resets that value if it is    present). CHECKED_FUNCS is either a string (indicating a single    name) or an object of some other type that supports 'in'.    CHECKED_FUNCS may contain __main__ to indicate an entire module.    Prints reports of each prohibited node and returns True iff none    are found.    See ast.__dir__() for AST type names. The special node name    'Recursion' checks for overtly recursive calls (i.e., calls of the    form NAME(...) where NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/utils.py",
            "function": "lines_from_file(path)",
            "docstring": "Return a list of strings, one for each line in a file."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/utils.py",
            "function": "remove_punctuation(s)",
            "docstring": "Return a string with the same contents as s, but with punctuation removed.  >>> remove_punctuation(\"It's a lovely day, don't you think?\")  'Its a lovely day dont you think'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/utils.py",
            "function": "lower(s)",
            "docstring": "Return a lowercased version of s."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/utils.py",
            "function": "split(s)",
            "docstring": "Return a list of words contained in s, which are sequences of characters  separated by whitespace (spaces, tabs, etc.).  >>> split(\"It's a lovely day, don't you think?\")  [\"It's\", 'a', 'lovely', 'day,', \"don't\", 'you', 'think?']"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "choose(paragraphs, select, k)",
            "docstring": "Return the Kth paragraph from PARAGRAPHS for which SELECT called on the  paragraph returns true. If there are fewer than K such paragraphs, return  the empty string."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "about(topic)",
            "docstring": "Return a select function that returns whether a paragraph contains one  of the words in TOPIC.  >>> about_dogs = about(['dog', 'dogs', 'pup', 'puppy'])  >>> choose(['Cute Dog!', 'That is a cat.', 'Nice pup!'], about_dogs, 0)  'Cute Dog!'  >>> choose(['Cute Dog!', 'That is a cat.', 'Nice pup.'], about_dogs, 1)  'Nice pup.'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "accuracy(typed, reference)",
            "docstring": "Return the accuracy (percentage of words typed correctly) of TYPED  when compared to the prefix of REFERENCE that was typed.  >>> accuracy('Cute Dog!', 'Cute Dog.')  50.0  >>> accuracy('A Cute Dog!', 'Cute Dog.')  0.0  >>> accuracy('cute Dog.', 'Cute Dog.')  50.0  >>> accuracy('Cute Dog. I say!', 'Cute Dog.')  50.0  >>> accuracy('Cute', 'Cute Dog.')  100.0  >>> accuracy('', 'Cute Dog.')  0.0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "wpm(typed, elapsed)",
            "docstring": "Return the words-per-minute (WPM) of the TYPED string."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "autocorrect(user_word, valid_words, diff_function, limit)",
            "docstring": "Returns the element of VALID_WORDS that has the smallest difference  from USER_WORD. Instead returns USER_WORD if that difference is greater  than LIMIT."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "swap_diff(start, goal, limit)",
            "docstring": "A diff function for autocorrect that determines how many letters  in START need to be substituted to create GOAL, then adds the difference in  their lengths."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "edit_diff(start, goal, limit)",
            "docstring": "A diff function that computes the edit distance from START to GOAL."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "final_diff(start, goal, limit)",
            "docstring": "A diff function. If you implement this function, it will be used."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "report_progress(typed, prompt, id, send)",
            "docstring": "Send a report of your id and progress so far to the multiplayer server."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "fastest_words_report(word_times)",
            "docstring": "Return a text description of the fastest words typed by each player."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "fastest_words(word_times, margin=1e-5)",
            "docstring": "A list of which words each player typed fastest."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "word_time(word, elapsed_time)",
            "docstring": "A data abstrction for the elapsed time that a player finished a word."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "word(word_time)",
            "docstring": "An accessor function for the word of a word_time."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "elapsed_time(word_time)",
            "docstring": "An accessor function for the elapsed time of a word_time."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "run_typing_test(topics)",
            "docstring": "Measure typing speed and accuracy on the command line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/typing.py",
            "function": "run(*args)",
            "docstring": "Read in the command-line argument and calls corresponding functions."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "route(path)",
            "docstring": "Register a route handler."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "request_paragraph(data)",
            "docstring": "Return a random paragraph."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "compute_accuracy(data)",
            "docstring": "Return [wpm, accuracy]."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "similar(w, v, n)",
            "docstring": "Whether W intersect V contains at least |W|-N and |V|-N elements."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "autocorrect(data)",
            "docstring": "Call autocorrect using the best score function available."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "reformat(word, raw_word)",
            "docstring": "Reformat WORD to match the capitalization and punctuation of RAW_WORD."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "multiplayer_post(path, data, server_url=DEFAULT_SERVER)",
            "docstring": "Post DATA to a multiplayer server PATH and return the response."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "multiplayer_route(path, server_path=None)",
            "docstring": "Convert a function that takes (data, send) into a route."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "forward_to_server(data, send)",
            "docstring": "Forward a request to the multiplayer server."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "report_progress(data, send)",
            "docstring": "Report progress to the multiplayer server and also return it."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "fastest_words(data, send)",
            "docstring": "Return a list of word_speed values describing the game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/gui.py",
            "function": "start(*args)",
            "docstring": "Start web server."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/ucb.py",
            "function": "main(fn)",
            "docstring": "Call fn with command line arguments. Used as a decorator.  The main decorator marks the function that starts a program. For example,  @main  def my_run_function():    # function body  Use this instead of the typical __name__ == \"__main__\" predicate."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/ucb.py",
            "function": "trace(fn)",
            "docstring": "A decorator that prints a function's name, its arguments, and its return  values each time the function is called. For example,  @trace  def compute_something(x, y):    # function body"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/ucb.py",
            "function": "log(message)",
            "docstring": "Print an indented message (used with trace)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/ucb.py",
            "function": "log_current_line()",
            "docstring": "Print information about the current line of code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/cats/ucb.py",
            "function": "interact(msg=None)",
            "docstring": "Start an interactive interpreter session in the current environment.  On Unix:   <Control>-D exits the interactive session and returns to normal execution.  In Windows:   <Control>-Z <Enter> exits the interactive session and returns to normal   execution."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "clear(self, shape='all')",
            "docstring": "Clear all shapes, text, and images."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "draw_polygon(self, points, color='Black', fill_color=None, filled=1, smooth=0, width=1)",
            "docstring": "Draw a polygon and return its tkinter id.    points -- a list of (x, y) pairs encoding pixel positions"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "draw_circle(self, center, radius, color='Black', fill_color=None, filled=1, width=1)",
            "docstring": "Draw a cirlce and return its tkinter id.    center -- an (x, y) pair encoding a pixel position"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "draw_line(self, start, end, color='Blue', width=1)",
            "docstring": "Draw a line and return its tkinter id.    start, end -- (x, y) pairs encoding a pixel position"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "draw_image(self, pos, image_file=None, scale=1, anchor=tkinter.NW, behind=0)",
            "docstring": "Draw an image from a file and return its tkinter id."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "animate_shape(self, id, duration, points_fn, frame_count=0)",
            "docstring": "Animate an existing shape over points."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "tail()",
            "docstring": "Continues the animation at the next frame."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "slide_shape(self, id, end_pos, duration, elapsed=0)",
            "docstring": "Slide an existing shape to end_pos."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "wait_for_click(self, seconds=0)",
            "docstring": "Return (position, elapsed) pair of click position and elapsed time.        position: (x,y) pixel position of click    elapsed: milliseconds elapsed since call    seconds: maximum number of seconds to wait for a click    If there is still no click after the given time, return (None, seconds)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "flattened(points)",
            "docstring": "Return a flat list of coordinates from a list of pairs."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "paired(coords)",
            "docstring": "Return a list of pairs from a flat list of coordinates."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "translate_point(point, angle, distance)",
            "docstring": "Translate a point a distance in a direction (angle)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "shift_point(point, offset)",
            "docstring": "Shift a point by an offset."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "rectangle_points(pos, width, height)",
            "docstring": "Return the points of a rectangle starting at pos."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/graphics.py",
            "function": "format_color(r, g, b)",
            "docstring": "Format a color as a string.  r, g, b -- integers from 0 to 255"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "__init__(self, name, exit=None, entrance=None)",
            "docstring": "Create a Place with the given NAME and EXIT.    name -- A string; the name of this Place.    exit -- The Place reached by exiting this Place (may be None)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "add_insect(self, insect)",
            "docstring": "Add an Insect to this Place.    There can be at most one Ant in a Place, unless exactly one of them is    a container ant (Problem 9), in which case there can be two. If add_insect    tries to add more Ants than is allowed, an assertion error is raised.    There can be any number of Bees in a Place."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "remove_insect(self, insect)",
            "docstring": "Remove an INSECT from this Place.    A target Ant may either be directly in the Place, or be contained by a    container Ant at this place. The true QueenAnt may not be removed. If    remove_insect tries to remove an Ant that is not anywhere in this    Place, an AssertionError is raised.    A Bee is just removed from the list of Bees."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "__init__(self, armor, place=None)",
            "docstring": "Create an Insect with an ARMOR amount and a starting PLACE."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "reduce_armor(self, amount)",
            "docstring": "Reduce armor by AMOUNT, and remove the insect from its place if it    has no armor remaining.    >>> test_insect = Insect(5)    >>> test_insect.reduce_armor(2)    >>> test_insect.armor    3"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "action(self, colony)",
            "docstring": "The action performed each turn.    colony -- The AntColony, used to access game state information."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "sting(self, ant)",
            "docstring": "Attack an ANT, reducing its armor by 1."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "move_to(self, place)",
            "docstring": "Move from the Bee's current Place to a new PLACE."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "blocked(self)",
            "docstring": "Return True if this Bee cannot advance to the next Place."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "action(self, colony)",
            "docstring": "A Bee's action stings the Ant that blocks its exit if it is blocked,    or moves to the exit of its current place otherwise.    colony -- The AntColony, used to access game state information."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "__init__(self, armor=1)",
            "docstring": "Create an Ant with an ARMOR quantity."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "action(self, colony)",
            "docstring": "Produce 1 additional food for the COLONY.    colony -- The AntColony, used to access game state information."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "nearest_bee(self, beehive)",
            "docstring": "Return the nearest Bee in a Place that is not the HIVE, connected to    the ThrowerAnt's Place by following entrances.    This method returns None if there is no such Bee (or none in range)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "throw_at(self, target)",
            "docstring": "Throw a leaf at the TARGET Bee, reducing its armor."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "action(self, colony)",
            "docstring": "Throw a leaf at the nearest Bee in range."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "random_or_none(s)",
            "docstring": "Return a random element of sequence S, or return None if S is empty."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "__init__(self, armor=3)",
            "docstring": "Create an Ant with an ARMOR quantity."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "reduce_armor(self, amount)",
            "docstring": "Reduce armor by AMOUNT, and remove the FireAnt from its place if it    has no armor remaining.    Make sure to damage each bee in the current place, and apply the bonus    if the fire ant dies."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "add_insect(self, insect)",
            "docstring": "Add an Insect to this place. If the insect is not watersafe, reduce    its armor to 0."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "action(self, colony)",
            "docstring": "A queen ant throws a leaf, but also doubles the damage of ants    in her tunnel.    Impostor queens do only one thing: reduce their own armor to 0."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "reduce_armor(self, amount)",
            "docstring": "Reduce armor by AMOUNT, and if the True QueenAnt has no armor    remaining, signal the end of the game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "make_slow(action, bee)",
            "docstring": "Return a new action method that calls ACTION every other turn.  action -- An action method of some Bee"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "make_scare(action, bee)",
            "docstring": "Return a new action method that makes the bee go backwards.  action -- An action method of some Bee"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "apply_effect(effect, bee, duration)",
            "docstring": "Apply a status effect to a BEE that lasts for DURATION turns."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "__init__(self, strategy, beehive, ant_types, create_places, dimensions, food=2)",
            "docstring": "Create an AntColony for simulating a game.    Arguments:    strategy -- a function to deploy ants to places    beehive -- a Hive full of bees    ant_types -- a list of ant constructors    create_places -- a function that creates the set of places    dimensions -- a pair containing the dimensions of the game layout"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "configure(self, beehive, create_places)",
            "docstring": "Configure the places in the colony."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "simulate(self)",
            "docstring": "Simulate an attack on the ant colony (i.e., play the game)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "deploy_ant(self, place_name, ant_type_name)",
            "docstring": "Place an ant if enough food is available.    This method is called by the current strategy to deploy ants."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "remove_ant(self, place_name)",
            "docstring": "Remove an Ant from the Colony."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "add_insect(self, insect)",
            "docstring": "Add an Insect to this Place.    Can't actually add Ants to a QueenPlace. However, if a Bee attempts to    enter the QueenPlace, a BeesWinException is raised, signaling the end    of a game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "ants_win()",
            "docstring": "Signal that Ants win."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "bees_win()",
            "docstring": "Signal that Bees win."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "ant_types()",
            "docstring": "Return a list of all implemented Ant classes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "interactive_strategy(colony)",
            "docstring": "A strategy that starts an interactive session and lets the user make  changes to the colony.  For example, one might deploy a ThrowerAnt to the first tunnel by invoking  colony.deploy_ant('tunnel_0_0', 'Thrower')"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "start_with_strategy(args, strategy)",
            "docstring": "Reads command-line arguments and starts a game with those options."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "wet_layout(queen, register_place, tunnels=3, length=9, moat_frequency=3)",
            "docstring": "Register a mix of wet and and dry places."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "dry_layout(queen, register_place, tunnels=3, length=9)",
            "docstring": "Register dry tunnels."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "add_wave(self, bee_type, bee_armor, time, count)",
            "docstring": "Add a wave at time with count Bees that have the specified armor."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants.py",
            "function": "all_bees(self)",
            "docstring": "Place all Bees in the beehive and return the list of Bees."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/utils.py",
            "function": "class_method_wrapper(method, pre=None, post=None)",
            "docstring": "Given a class METHOD and two wrapper function, a PRE-function and  POST-function, first calls the pre-wrapper, calls the wrapped class method,  and then calls the post-wrapper.    All wrappers should have the parameters (self, rv, *args). However,  pre-wrappers will always have `None` passed in as `rv`, since a return  value has not been evaluated yet.  >>> def pre_wrapper(instance, rv, *args):  ...   print('Pre-wrapper called: {0}'.format(args))  >>> def post_wrapper(instance, rv, *args):  ...   print('Post-wrapper called: {0} -> {1}'.format(args, rv))  >>> class Foo(object):  ...   def __init__(self):  ...     self.bar = 20  ...   def method(self, var1, var2):  ...     print('Original method called')  ...     return var1 + var2 + self.bar  >>> Foo.method = class_method_wrapper(Foo.method, pre_wrapper, post_wrapper)  >>> f = Foo()  >>> x = f.method(1, 2)  Pre-wrapper called: (1, 2)  Original method called  Post-wrapper called: (1, 2) -> 23  >>> x  23"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/utils.py",
            "function": "print_expired_insects(self, rv, *args)",
            "docstring": "Post-wrapper for Insect.reduce_armor, and will print a message if the  insect has expired (armor reduced to 0).    >>> from ants import Insect, Bee, ThrowerAnt, Place  >>> Insect.reduce_armor = class_method_wrapper(Insect.reduce_armor,  ...     pre=print_expired_insects)  >>> place = Place('Test')  >>> bee = Bee(3)  >>> place.add_insect(bee)  >>> bee.reduce_armor(2)  >>> bee.reduce_armor(1)  Bee(Test) ran out of armor and expired  >>> thrower = ThrowerAnt()  >>> place.add_insect(thrower)  >>> thrower.reduce_armor(1)  ThrowerAnt(Test) ran out of armor and expired"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/utils.py",
            "function": "print_thrower_target(self, rv, *args)",
            "docstring": "Prints the target of a ThrowerAnt, if the ThrowerAnt found a target.  >>> from ants import *  >>> beehive = Hive(AssaultPlan())  >>> dimensions = (1, 9)  >>> colony = AntColony(None, beehive, ant_types(), dry_layout, dimensions)  >>> ThrowerAnt.nearest_bee = class_method_wrapper(ThrowerAnt.nearest_bee,  ...     post=print_thrower_target)  >>> thrower = ThrowerAnt()  >>> short = ShortThrower()  >>> bee = Bee(5)  >>> colony.places['tunnel_0_1'].add_insect(short)  >>> colony.places['tunnel_0_0'].add_insect(thrower)  >>> colony.places['tunnel_0_5'].add_insect(bee)  >>> thrower.action(colony)  ThrowerAnt(1, tunnel_0_0) targeted Bee(5, tunnel_0_5)  >>> short.action(colony)  # Bee not in range of ShortThrower  >>> bee.action(colony)   # Bee moves into range  >>> short.action(colony)  ShortThrower(1, tunnel_0_1) targeted Bee(4, tunnel_0_4)"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/gui.py",
            "function": "getState(self, data=None)",
            "docstring": "Get our message from JSON"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/gui.py",
            "function": "saveState(self, key, val)",
            "docstring": "Saves our game object to JSON file"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/gui.py",
            "function": "strategy(self, colony)",
            "docstring": "The strategy function is called by ants.AntColony each turn"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/gui.py",
            "function": "_init_places(self, colony)",
            "docstring": "Calculate all of our place data"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/gui.py",
            "function": "_update_control_panel(self, colony)",
            "docstring": "Reflect the game state in the play area."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/gui.py",
            "function": "cgiFieldStorageToDict(self, fieldStorage)",
            "docstring": "Get a plain dictionary rather than the '.value' system used by the      cgi module's native fieldStorage class."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "initialize_colony_graphics(self, colony)",
            "docstring": "Create canvas, control panel, places, and labels."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "_init_control_panel(self, colony)",
            "docstring": "Construct the control panel of available ant types."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "_init_places(self, colony)",
            "docstring": "Construct places in the play area."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "add_click_rect(self, pos, width, height, on_click, color='White')",
            "docstring": "Construct a rectangle that can be clicked."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "strategy(self, colony)",
            "docstring": "The strategy function is called by the ants.AntColony each turn."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "_interpret_click(self, pos, colony)",
            "docstring": "Interpret a click position by finding its click rectangle."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "_update_control_panel(self, colony)",
            "docstring": "Reflect the game state in the control panel."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "_update_places(self, colony)",
            "docstring": "Reflect the game state in the play area.    This function handles several aspects of the game:     - Adding Ant images for newly placed ants     - Moving Bee images for bees that have advanced     - Moving insects out of play when they have expired"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "_draw_insect(self, insect, place_name, random_offset=False, behind=0)",
            "docstring": "Draw an insect and store the ID of its image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "_throw(self, ant, colony)",
            "docstring": "Animate a leaf thrown at a Bee."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "leaf_coords(pos, angle, length)",
            "docstring": "Return the coordinates of a leaf polygon."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ants_gui.py",
            "function": "animate_leaf(canvas, start, end, duration=0.3, color='ForestGreen')",
            "docstring": "Define the animation frames for a thrown leaf."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ucb.py",
            "function": "main(fn)",
            "docstring": "Call fn with command line arguments. Used as a decorator.  The main decorator marks the function that starts a program. For example,  @main  def my_run_function():    # function body  Use this instead of the typical __name__ == \"__main__\" predicate."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ucb.py",
            "function": "trace(fn)",
            "docstring": "A decorator that prints a function's name, its arguments, and its return  values each time the function is called. For example,  @trace  def compute_something(x, y):    # function body"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ucb.py",
            "function": "log(message)",
            "docstring": "Print an indented message (used with trace)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ucb.py",
            "function": "log_current_line()",
            "docstring": "Print information about the current line of code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/ucb.py",
            "function": "interact(msg=None)",
            "docstring": "Start an interactive interpreter session in the current environment.  On Unix:   <Control>-D exits the interactive session and returns to normal execution.  In Windows:   <Control>-Z <Enter> exits the interactive session and returns to normal   execution."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/projects/ants/state.py",
            "function": "__init__(self)",
            "docstring": "Create a new gamestate"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw09/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw07/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "make_counter()",
            "docstring": "Return a counter function.  >>> c = make_counter()  >>> c('a')  1  >>> c('a')  2  >>> c('b')  1  >>> c('a')  3  >>> c2 = make_counter()  >>> c2('b')  1  >>> c2('b')  2  >>> c('b') + c2('b')  5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "preorder(t)",
            "docstring": "Return a list of the entries in this tree in the order that they  would be visited by a preorder traversal (see problem description).  >>> numbers = Tree(1, [Tree(2), Tree(3, [Tree(4), Tree(5)]), Tree(6, [Tree(7)])])  >>> preorder(numbers)  [1, 2, 3, 4, 5, 6, 7]  >>> preorder(Tree(2, [Tree(4, [Tree(6)])]))  [2, 4, 6]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "store_digits(n)",
            "docstring": "Stores the digits of a positive number n in a linked list.  >>> s = store_digits(1)  >>> s  Link(1)  >>> store_digits(2345)  Link(2, Link(3, Link(4, Link(5))))  >>> store_digits(876)  Link(8, Link(7, Link(6)))"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "generate_paths(t, x)",
            "docstring": "Yields all possible paths from the root of t to a node with the label x  as a list.  >>> t1 = Tree(1, [Tree(2, [Tree(3), Tree(4, [Tree(6)]), Tree(5)]), Tree(5)])  >>> print(t1)  1   2    3    4     6    5   5  >>> next(generate_paths(t1, 6))  [1, 2, 4, 6]  >>> path_to_5 = generate_paths(t1, 5)  >>> sorted(list(path_to_5))  [[1, 2, 5], [1, 5]]  >>> t2 = Tree(0, [Tree(2, [t1])])  >>> print(t2)  0   2    1     2      3      4       6      5     5  >>> path_to_2 = generate_paths(t2, 2)  >>> sorted(list(path_to_2))  [[0, 2], [0, 2, 1, 2]]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "remove_all(link, value)",
            "docstring": "Remove all the nodes containing value in link. Assume that the  first element is never removed.  >>> l1 = Link(0, Link(2, Link(2, Link(3, Link(1, Link(2, Link(3)))))))  >>> print(l1)  <0 2 2 3 1 2 3>  >>> remove_all(l1, 2)  >>> print(l1)  <0 3 1 3>  >>> remove_all(l1, 3)  >>> print(l1)  <0 1>  >>> remove_all(l1, 3)  >>> print(l1)  <0 1>"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "deep_map(f, link)",
            "docstring": "Return a Link with the same structure as link but with fn mapped over  its elements. If an element is an instance of a linked list, recursively  apply f inside that linked list as well.  >>> s = Link(1, Link(Link(2, Link(3)), Link(4)))  >>> print(deep_map(lambda x: x * x, s))  <1 <4 9> 16>  >>> print(s) # unchanged  <1 <2 3> 4>  >>> print(deep_map(lambda x: 2 * x, Link(s, Link(Link(Link(5))))))  <<2 <4 6> 8> <<10>>>"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "map(self, fn)",
            "docstring": "Apply a function `fn` to each node in the tree and mutate the tree.    >>> t1 = Tree(1)    >>> t1.map(lambda x: x + 2)    >>> t1.map(lambda x : x * 4)    >>> t1.label    12    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> t2.map(lambda x: x * x)    >>> t2    Tree(9, [Tree(4, [Tree(25)]), Tree(16)])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05 copy/hw05.py",
            "function": "__contains__(self, e)",
            "docstring": "Determine whether an element exists in the tree.    >>> t1 = Tree(1)    >>> 1 in t1    True    >>> 8 in t1    False    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> 6 in t2    False    >>> 5 in t2    True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/hw06.py",
            "function": "survey(p)",
            "docstring": "You do not need to understand this code.  >>> survey(passphrase)  '147be620a603b33dc0450faa16b2fdda236cb7a9516770446de541a2'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw06/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/hw08.py",
            "function": "quine_test()",
            "docstring": ">>> quine_test()  QUINE!"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw08/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/construct_check.py",
            "function": "check(source_file, checked_funcs, disallow, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW  (an object supporting 'in') are not present in the function(s) named  CHECKED_FUNCS in SOURCE. By default, SOURCE is the contents of the  file SOURCE_FILE. CHECKED_FUNCS is either a string (indicating a single  name) or an object of some other type that supports 'in'. CHECKED_FUNCS  may contain __main__ to indicate an entire module. Prints reports of  each prohibited node and returns True iff none are found.  See ast.__dir__() for AST type names. The special node name 'Recursion'  checks for overtly recursive calls (i.e., calls of the form NAME(...) where  NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/construct_check.py",
            "function": "__init__(self, disallow=())",
            "docstring": "DISALLOW is the initial default list of disallowed    node-type names."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/construct_check.py",
            "function": "errors(self)",
            "docstring": "Returns the number of number of prohibited constructs found in    the last call to check."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/construct_check.py",
            "function": "check(self, source_file, checked_funcs, disallow=None, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW    (an object supporting the contains test) are not present in    the function(s) named CHECKED_FUNCS in SOURCE. By default, SOURCE    is the contents of the file SOURCE_FILE. DISALLOW defaults to the    argument given to the constructor (and resets that value if it is    present). CHECKED_FUNCS is either a string (indicating a single    name) or an object of some other type that supports 'in'.    CHECKED_FUNCS may contain __main__ to indicate an entire module.    Prints reports of each prohibited node and returns True iff none    are found.    See ast.__dir__() for AST type names. The special node name    'Recursion' checks for overtly recursive calls (i.e., calls of the    form NAME(...) where NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "skip_add(n)",
            "docstring": "Takes a number n and returns n + n-2 + n-4 + n-6 + ... + 0.  >>> skip_add(5) # 5 + 3 + 1 + 0  9  >>> skip_add(10) # 10 + 8 + 6 + 4 + 2 + 0  30  >>> # Do not use while/for loops!  >>> from construct_check import check  >>> # ban iteration  >>> check(this_file, 'skip_add',  ...    ['While', 'For'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "summation(n, term)",
            "docstring": "Return the sum of the first n terms in the sequence defined by term.  Implement using recursion!  >>> summation(5, lambda x: x * x * x) # 1^3 + 2^3 + 3^3 + 4^3 + 5^3  225  >>> summation(9, lambda x: x + 1) # 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10  54  >>> summation(5, lambda x: 2**x) # 2^1 + 2^2 + 2^3 + 2^4 + 2^5  62  >>> # Do not use while/for loops!  >>> from construct_check import check  >>> # ban iteration  >>> check(this_file, 'summation',  ...    ['While', 'For'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "gcd(a, b)",
            "docstring": "Returns the greatest common divisor of a and b.  Should be implemented using recursion.  >>> gcd(34, 19)  1  >>> gcd(39, 91)  13  >>> gcd(20, 30)  10  >>> gcd(40, 40)  40"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "couple(s1, s2)",
            "docstring": "Return a list that contains lists with i-th elements of two sequences  coupled together.  >>> s1 = [1, 2, 3]  >>> s2 = [4, 5, 6]  >>> couple(s1, s2)  [[1, 4], [2, 5], [3, 6]]  >>> s3 = ['c', 6]  >>> s4 = ['s', '1']  >>> couple(s3, s4)  [['c', 's'], [6, '1']]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "enumerate(s, start=0)",
            "docstring": "Returns a list of lists, where the i-th list contains i+start and  the i-th element of s.  >>> enumerate([6, 1, 'a'])  [[0, 6], [1, 1], [2, 'a']]  >>> enumerate('five', 5)  [[5, 'f'], [6, 'i'], [7, 'v'], [8, 'e']]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "squares(s)",
            "docstring": "Returns a new list containing square roots of the elements of the  original list that are perfect squares.  >>> seq = [8, 49, 8, 9, 2, 1, 100, 102]  >>> squares(seq)  [7, 3, 1, 10]  >>> seq = [500, 30]  >>> squares(seq)  []"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "key_of_min_value(d)",
            "docstring": "Returns the key in a dict d that corresponds to the minimum value of d.  >>> letters = {'a': 6, 'b': 5, 'c': 4, 'd': 5}  >>> min(letters)  'a'  >>> key_of_min_value(letters)  'c'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab04/lab04.py",
            "function": "ten_pairs(n)",
            "docstring": "Return the number of ten-pairs within positive integer n.  >>> ten_pairs(7823952)  3  >>> ten_pairs(55055)  6  >>> ten_pairs(9641469)  6"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/construct_check.py",
            "function": "check(source_file, checked_funcs, disallow, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW  (an object supporting 'in') are not present in the function(s) named  CHECKED_FUNCS in SOURCE. By default, SOURCE is the contents of the  file SOURCE_FILE. CHECKED_FUNCS is either a string (indicating a single  name) or an object of some other type that supports 'in'. CHECKED_FUNCS  may contain __main__ to indicate an entire module. Prints reports of  each prohibited node and returns True iff none are found.  See ast.__dir__() for AST type names. The special node name 'Recursion'  checks for overtly recursive calls (i.e., calls of the form NAME(...) where  NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/construct_check.py",
            "function": "__init__(self, disallow=())",
            "docstring": "DISALLOW is the initial default list of disallowed    node-type names."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/construct_check.py",
            "function": "errors(self)",
            "docstring": "Returns the number of number of prohibited constructs found in    the last call to check."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/construct_check.py",
            "function": "check(self, source_file, checked_funcs, disallow=None, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW    (an object supporting the contains test) are not present in    the function(s) named CHECKED_FUNCS in SOURCE. By default, SOURCE    is the contents of the file SOURCE_FILE. DISALLOW defaults to the    argument given to the constructor (and resets that value if it is    present). CHECKED_FUNCS is either a string (indicating a single    name) or an object of some other type that supports 'in'.    CHECKED_FUNCS may contain __main__ to indicate an entire module.    Prints reports of each prohibited node and returns True iff none    are found.    See ast.__dir__() for AST type names. The special node name    'Recursion' checks for overtly recursive calls (i.e., calls of the    form NAME(...) where NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "distance(city1, city2)",
            "docstring": ">>> city1 = make_city('city1', 0, 1)  >>> city2 = make_city('city2', 0, 2)  >>> distance(city1, city2)  1.0  >>> city3 = make_city('city3', 6.5, 12)  >>> city4 = make_city('city4', 2.5, 15)  >>> distance(city3, city4)  5.0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "closer_city(lat, lon, city1, city2)",
            "docstring": "Returns the name of either city1 or city2, whichever is closest to  coordinate (lat, lon).  >>> berkeley = make_city('Berkeley', 37.87, 112.26)  >>> stanford = make_city('Stanford', 34.05, 118.25)  >>> closer_city(38.33, 121.44, berkeley, stanford)  'Stanford'  >>> bucharest = make_city('Bucharest', 44.43, 26.10)  >>> vienna = make_city('Vienna', 48.20, 16.37)  >>> closer_city(41.29, 174.78, bucharest, vienna)  'Bucharest'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "check_abstraction()",
            "docstring": "There's nothing for you to do for this function, it's just here for the extra doctest  >>> change_abstraction(True)  >>> city1 = make_city('city1', 0, 1)  >>> city2 = make_city('city2', 0, 2)  >>> distance(city1, city2)  1.0  >>> city3 = make_city('city3', 6.5, 12)  >>> city4 = make_city('city4', 2.5, 15)  >>> distance(city3, city4)  5.0  >>> berkeley = make_city('Berkeley', 37.87, 112.26)  >>> stanford = make_city('Stanford', 34.05, 118.25)  >>> closer_city(38.33, 121.44, berkeley, stanford)  'Stanford'  >>> bucharest = make_city('Bucharest', 44.43, 26.10)  >>> vienna = make_city('Vienna', 48.20, 16.37)  >>> closer_city(41.29, 174.78, bucharest, vienna)  'Bucharest'  >>> change_abstraction(False)"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "make_city(name, lat, lon)",
            "docstring": ">>> city = make_city('Berkeley', 0, 1)  >>> get_name(city)  'Berkeley'  >>> get_lat(city)  0  >>> get_lon(city)  1"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "get_name(city)",
            "docstring": ">>> city = make_city('Berkeley', 0, 1)  >>> get_name(city)  'Berkeley'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "get_lat(city)",
            "docstring": ">>> city = make_city('Berkeley', 0, 1)  >>> get_lat(city)  0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "get_lon(city)",
            "docstring": ">>> city = make_city('Berkeley', 0, 1)  >>> get_lon(city)  1"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "acorn_finder(t)",
            "docstring": "Returns True if t contains a node with the value 'acorn' and  False otherwise.  >>> scrat = tree('acorn')  >>> acorn_finder(scrat)  True  >>> sproul = tree('roots', [tree('branch1', [tree('leaf'), tree('acorn')]), tree('branch2')])  >>> acorn_finder(sproul)  True  >>> numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])  >>> acorn_finder(numbers)  False  >>> t = tree(1, [tree('acorn',[tree('not acorn')])])  >>> acorn_finder(t)  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "sprout_leaves(t, vals)",
            "docstring": "Sprout new leaves containing the data in vals at each leaf in  the original tree t and return the resulting tree.  >>> t1 = tree(1, [tree(2), tree(3)])  >>> print_tree(t1)  1   2   3  >>> new1 = sprout_leaves(t1, [4, 5])  >>> print_tree(new1)  1   2    4    5   3    4    5  >>> t2 = tree(1, [tree(2, [tree(3)])])  >>> print_tree(t2)  1   2    3  >>> new2 = sprout_leaves(t2, [6, 1, 2])  >>> print_tree(new2)  1   2    3     6     1     2"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "add_chars(w1, w2)",
            "docstring": "Return a string containing the characters you need to add to w1 to get w2.  You may assume that w1 is a subsequence of w2.  >>> add_chars(\"owl\", \"howl\")  'h'  >>> add_chars(\"want\", \"wanton\")  'on'  >>> add_chars(\"rat\", \"radiate\")  'diae'  >>> add_chars(\"a\", \"prepare\")  'prepre'  >>> add_chars(\"resin\", \"recursion\")  'curo'  >>> add_chars(\"fin\", \"effusion\")  'efuso'  >>> add_chars(\"coy\", \"cacophony\")  'acphon'  >>> from construct_check import check  >>> # ban iteration and sets  >>> check(LAB_SOURCE_FILE, 'add_chars',  ...    ['For', 'While', 'Set', 'SetComp']) # Must use recursion  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "add_trees(t1, t2)",
            "docstring": ">>> numbers = tree(1,  ...        [tree(2,  ...           [tree(3),  ...            tree(4)]),  ...         tree(5,  ...           [tree(6,  ...              [tree(7)]),  ...            tree(8)])])  >>> print_tree(add_trees(numbers, numbers))  2   4    6    8   10    12     14    16  >>> print_tree(add_trees(tree(2), tree(3, [tree(4), tree(5)])))  5   4   5  >>> print_tree(add_trees(tree(2, [tree(3)]), tree(2, [tree(3), tree(4)])))  4   6   4  >>> print_tree(add_trees(tree(2, [tree(3, [tree(4), tree(5)])]), \\  tree(2, [tree(3, [tree(4)]), tree(5)])))  4   6    8    5   5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "build_successors_table(tokens)",
            "docstring": "Return a dictionary: keys are words; values are lists of successors.  >>> text = ['We', 'came', 'to', 'investigate', ',', 'catch', 'bad', 'guys', 'and', 'to', 'eat', 'pie', '.']  >>> table = build_successors_table(text)  >>> sorted(table)  [',', '.', 'We', 'and', 'bad', 'came', 'catch', 'eat', 'guys', 'investigate', 'pie', 'to']  >>> table['to']  ['investigate', 'eat']  >>> table['pie']  ['.']  >>> table['.']  ['We']"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "construct_sent(word, table)",
            "docstring": "Prints a random sentence starting with word, sampling from  table.  >>> table = {'Wow': ['!'], 'Sentences': ['are'], 'are': ['cool'], 'cool': ['.']}  >>> construct_sent('Wow', table)  'Wow!'  >>> construct_sent('Sentences', table)  'Sentences are cool.'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "shakespeare_tokens(path='shakespeare.txt', url='http//composingprograms.com/shakespeare.txt')",
            "docstring": "Return the words of Shakespeare's plays as a list."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "tree(label, branches=[])",
            "docstring": "Construct a tree with the given label value and a list of branches."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "label(tree)",
            "docstring": "Return the label value of a tree."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "branches(tree)",
            "docstring": "Return the list of branches of the given tree."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "is_tree(tree)",
            "docstring": "Returns True if the given tree is a tree, and False otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "is_leaf(tree)",
            "docstring": "Returns True if the given tree's list of branches is empty, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "print_tree(t, indent=0)",
            "docstring": "Print a representation of this tree in which each node is  indented by two spaces times its depth from the root.  >>> print_tree(tree(1))  1  >>> print_tree(tree(1, [tree(2)]))  1   2  >>> numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])  >>> print_tree(numbers)  1   2   3    4    5   6    7"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab05/lab05.py",
            "function": "copy_tree(t)",
            "docstring": "Returns a copy of t. Only for testing purposes.  >>> t = tree(5)  >>> copy = copy_tree(t)  >>> t = tree(6)  >>> print_tree(copy)  5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab02/lab02.py",
            "function": "lambda_curry2(func)",
            "docstring": "Returns a Curried version of a two-argument function FUNC.  >>> from operator import add  >>> curried_add = lambda_curry2(add)  >>> add_three = curried_add(3)  >>> add_three(5)  8"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab02/lab02.py",
            "function": "count_cond(condition)",
            "docstring": "Returns a function with one parameter N that counts all the numbers from  1 to N that satisfy the two-argument predicate function Condition, where  the first argument for Condition is N and the second argument is the  number from 1 to N.  >>> count_factors = count_cond(lambda n, i: n % i == 0)  >>> count_factors(2)  # 1, 2  2  >>> count_factors(4)  # 1, 2, 4  3  >>> count_factors(12) # 1, 2, 3, 4, 6, 12  6  >>> is_prime = lambda n, i: count_factors(i) == 2  >>> count_primes = count_cond(is_prime)  >>> count_primes(2)  # 2  1  >>> count_primes(3)  # 2, 3  2  >>> count_primes(4)  # 2, 3  2  >>> count_primes(5)  # 2, 3, 5  3  >>> count_primes(20)  # 2, 3, 5, 7, 11, 13, 17, 19  8"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab02/lab02_extra.py",
            "function": "compose1(f, g)",
            "docstring": "Return the composition function which given x, computes f(g(x)).  >>> add_one = lambda x: x + 1    # adds one to x  >>> square = lambda x: x**2  >>> a1 = compose1(square, add_one)  # (x + 1)^2  >>> a1(4)  25  >>> mul_three = lambda x: x * 3   # multiplies 3 to x  >>> a2 = compose1(mul_three, a1)  # ((x + 1)^2) * 3  >>> a2(4)  75  >>> a2(5)  108"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab02/lab02_extra.py",
            "function": "composite_identity(f, g)",
            "docstring": "Return a function with one parameter x that returns True if f(g(x)) is  equal to g(f(x)). You can assume the result of g(x) is a valid input for f  and vice versa.  >>> add_one = lambda x: x + 1    # adds one to x  >>> square = lambda x: x**2  >>> b1 = composite_identity(square, add_one)  >>> b1(0)              # (0 + 1)^2 == 0^2 + 1  True  >>> b1(4)              # (4 + 1)^2 != 4^2 + 1  False"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab02/lab02_extra.py",
            "function": "cycle(f1, f2, f3)",
            "docstring": "Returns a function that is itself a higher-order function.  >>> def add1(x):  ...   return x + 1  >>> def times2(x):  ...   return x * 2  >>> def add3(x):  ...   return x + 3  >>> my_cycle = cycle(add1, times2, add3)  >>> identity = my_cycle(0)  >>> identity(5)  5  >>> add_one_then_double = my_cycle(2)  >>> add_one_then_double(1)  4  >>> do_all_functions = my_cycle(3)  >>> do_all_functions(2)  9  >>> do_more_than_a_cycle = my_cycle(4)  >>> do_more_than_a_cycle(2)  10  >>> do_two_cycles = my_cycle(6)  >>> do_two_cycles(1)  19"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab11/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/reader.py",
            "function": "read(s)",
            "docstring": "Parse an expression from a string. If the string does not contain an  expression, None is returned. If the string cannot be parsed, a SyntaxError  is raised.  >>> read('lambda f: f(0)')  LambdaExpr(['f'], CallExpr(Name('f'), [Literal(0)]))  >>> read('(lambda x: x)(5)')  CallExpr(LambdaExpr(['x'], Name('x')), [Literal(5)])  >>> read('(lambda: 5)()')  CallExpr(LambdaExpr([], Literal(5)), [])  >>> read('lambda x y: 10')  Traceback (most recent call last):   ...  SyntaxError: expected ':' but got 'y'  >>> read(' ') # returns None"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/reader.py",
            "function": "tokenize(s)",
            "docstring": "Splits the string s into tokens and returns a list of them.  >>> tokenize('lambda f: f(0, 4.2)')  ['lambda', 'f', ':', 'f', '(', 0, ',', 4.2, ')']"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/utils.py",
            "function": "comma_separated(xs)",
            "docstring": "Convert each value in the sequence xs to a string, and separate them  with commas.  >>> comma_separated(['spam', 5, False])  'spam, 5, False'  >>> comma_separated([5])  '5'  >>> comma_separated([])  ''"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/buffer.py",
            "function": "pop_first(self)",
            "docstring": "Remove the next item from self and return it. If self has    exhausted its source, returns None."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/buffer.py",
            "function": "current(self)",
            "docstring": "Return the current element, or None if none exists."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "eval(self, env)",
            "docstring": "Each subclass of Expr implements its own eval method.    `env` is a dictionary mapping strings to `Value` instances,    representing the environment in which this expression is being    evaluated. This method should return a `Value` instance, the result of    evaluating the expression."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "__str__(self)",
            "docstring": "Returns a parsable and human-readable string of this expression (i.e.    what you would type into the interpreter).    >>> expr = CallExpr(LambdaExpr(['x'], Name('x')), [Literal(5)])    >>> str(expr)    '(lambda x: x)(5)'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "__repr__(self)",
            "docstring": "Returns how this expression is written in our Python representation.    >>> expr1 = LambdaExpr(['f'], CallExpr(Name('f'), [Literal(0)]))    >>> expr1    LambdaExpr(['f'], CallExpr(Name('f'), [Literal(0)]))    >>> expr2 = CallExpr(LambdaExpr([], Literal(5)), [])    >>> expr2    CallExpr(LambdaExpr([], Literal(5)), [])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "eval(self, env)",
            "docstring": ">>> env = {    ...   'a': Number(1),    ...   'b': LambdaFunction([], Literal(0), {})    ... }    >>> Name('a').eval(env)    Number(1)    >>> Name('b').eval(env)    LambdaFunction([], Literal(0), {})    >>> try:    ...   print(Name('c').eval(env))    ... except NameError:    ...   print('Exception raised!')    Exception raised!"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "eval(self, env)",
            "docstring": ">>> from reader import read    >>> new_env = global_env.copy()    >>> new_env.update({'a': Number(1), 'b': Number(2)})    >>> add = CallExpr(Name('add'), [Literal(3), Name('a')])    >>> add.eval(new_env)    Number(4)    >>> new_env['a'] = Number(5)    >>> add.eval(new_env)    Number(8)    >>> read('max(b, a, 4, -1)').eval(new_env)    Number(5)    >>> read('add(mul(3, 4), b)').eval(new_env)    Number(14)"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "apply(self, arguments)",
            "docstring": "Each subclass of Value implements its own apply method.    Note that only functions can be \"applied\"; attempting to apply a    `Number` (e.g. as in 4(2, 3)) will raise an exception.    For functions, `arguments` is a list of `Value` instances, the    arguments to the function. It should return a `Value` instance, the    result of applying the function to the arguments."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "__str__(self)",
            "docstring": "Returns a parsable and human-readable version of this value (i.e. the    output of this value to be displayed in the interpreter)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "__repr__(self)",
            "docstring": "Returns how this value is written in our Python representation."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab10/expr.py",
            "function": "apply(self, arguments)",
            "docstring": ">>> from reader import read    >>> add_lambda = read('lambda x, y: add(x, y)').eval(global_env)    >>> add_lambda.apply([Number(1), Number(2)])    Number(3)    >>> add_lambda.apply([Number(3), Number(4)])    Number(7)    >>> sub_lambda = read('lambda add: sub(10, add)').eval(global_env)    >>> sub_lambda.apply([Number(8)])    Number(2)    >>> add_lambda.apply([Number(8), Number(10)]) # Make sure you made a copy of env    Number(18)    >>> read('(lambda x: lambda y: add(x, y))(3)(4)').eval(global_env)    Number(7)    >>> read('(lambda x: x(x))(lambda y: 4)').eval(global_env)    Number(4)"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "intersection(st, ave)",
            "docstring": "Represent an intersection using the Cantor pairing function."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "taxicab(a, b)",
            "docstring": "Return the taxicab distance between two intersections.  >>> times_square = intersection(46, 7)  >>> ess_a_bagel = intersection(51, 3)  >>> taxicab(times_square, ess_a_bagel)  9  >>> taxicab(ess_a_bagel, times_square)  9"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "mobile(left, right)",
            "docstring": "Construct a mobile from a left side and a right side."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "is_mobile(m)",
            "docstring": "Return whether m is a mobile."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "left(m)",
            "docstring": "Select the left side of a mobile."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "right(m)",
            "docstring": "Select the right side of a mobile."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "side(length, mobile_or_weight)",
            "docstring": "Construct a side: a length of rod with a mobile or weight at the end."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "is_side(s)",
            "docstring": "Return whether s is a side."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "length(s)",
            "docstring": "Select the length of a side."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "end(s)",
            "docstring": "Select the mobile or weight hanging at the end of a side."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "weight(size)",
            "docstring": "Construct a weight of some size."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "size(w)",
            "docstring": "Select the size of a weight."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "is_weight(w)",
            "docstring": "Whether w is a weight."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "total_weight(m)",
            "docstring": "Return the total weight of m, a weight or mobile.  >>> t, u, v = examples()  >>> total_weight(t)  3  >>> total_weight(u)  6  >>> total_weight(v)  9"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "balanced(m)",
            "docstring": "Return whether m is balanced.    >>> t, u, v = examples()    >>> balanced(t)    True    >>> balanced(v)    True    >>> w = mobile(side(3, t), side(2, u))    >>> balanced(w)    False    >>> balanced(mobile(side(1, v), side(1, w)))    False    >>> balanced(mobile(side(1, w), side(1, v)))    False"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "totals_tree(m)",
            "docstring": "Return a tree representing the mobile with its total weight at the root.  >>> t, u, v = examples()  >>> print_tree(totals_tree(t))  3   2   1  >>> print_tree(totals_tree(u))  6   1   5    3    2  >>> print_tree(totals_tree(v))  9   3    2    1   6    1    5     3     2"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "replace_leaf(t, old, new)",
            "docstring": "Returns a new tree where every leaf value equal to old has  been replaced with new.  >>> yggdrasil = tree('odin',  ...         [tree('balder',  ...            [tree('thor'),  ...             tree('freya')]),  ...          tree('frigg',  ...            [tree('thor')]),  ...          tree('thor',  ...            [tree('sif'),  ...             tree('thor')]),  ...          tree('thor')])  >>> laerad = copy_tree(yggdrasil) # copy yggdrasil for testing purposes  >>> print_tree(replace_leaf(yggdrasil, 'thor', 'freya'))  odin   balder    freya    freya   frigg    freya   thor    sif    freya   freya  >>> laerad == yggdrasil # Make sure original tree is unmodified  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "make_fib()",
            "docstring": "Returns a function that returns the next Fibonacci number  every time it is called.  >>> fib = make_fib()  >>> fib()  0  >>> fib()  1  >>> fib()  1  >>> fib()  2  >>> fib()  3  >>> fib2 = make_fib()  >>> fib() + sum([fib2() for _ in range(5)])  12  >>> from construct_check import check  >>> # Do not use lists in your implementation  >>> check(this_file, 'make_fib', ['List'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "make_withdraw(balance, password)",
            "docstring": "Return a password-protected withdraw function.  >>> w = make_withdraw(100, 'hax0r')  >>> w(25, 'hax0r')  75  >>> error = w(90, 'hax0r')  >>> error  'Insufficient funds'  >>> error = w(25, 'hwat')  >>> error  'Incorrect password'  >>> new_bal = w(25, 'hax0r')  >>> new_bal  50  >>> w(75, 'a')  'Incorrect password'  >>> w(10, 'hax0r')  40  >>> w(20, 'n00b')  'Incorrect password'  >>> w(10, 'hax0r')  \"Your account is locked. Attempts: ['hwat', 'a', 'n00b']\"  >>> w(10, 'l33t')  \"Your account is locked. Attempts: ['hwat', 'a', 'n00b']\"  >>> type(w(10, 'l33t')) == str  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "make_joint(withdraw, old_password, new_password)",
            "docstring": "Return a password-protected withdraw function that has joint access to  the balance of withdraw.  >>> w = make_withdraw(100, 'hax0r')  >>> w(25, 'hax0r')  75  >>> make_joint(w, 'my', 'secret')  'Incorrect password'  >>> j = make_joint(w, 'hax0r', 'secret')  >>> w(25, 'secret')  'Incorrect password'  >>> j(25, 'secret')  50  >>> j(25, 'hax0r')  25  >>> j(100, 'secret')  'Insufficient funds'  >>> j2 = make_joint(j, 'secret', 'code')  >>> j2(5, 'code')  20  >>> j2(5, 'secret')  15  >>> j2(5, 'hax0r')  10  >>> j2(25, 'password')  'Incorrect password'  >>> j2(5, 'secret')  \"Your account is locked. Attempts: ['my', 'secret', 'password']\"  >>> j(5, 'secret')  \"Your account is locked. Attempts: ['my', 'secret', 'password']\"  >>> w(5, 'hax0r')  \"Your account is locked. Attempts: ['my', 'secret', 'password']\"  >>> make_joint(w, 'hax0r', 'hello')  \"Your account is locked. Attempts: ['my', 'secret', 'password']\""
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "tree(label, branches=[])",
            "docstring": "Construct a tree with the given label value and a list of branches."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "label(tree)",
            "docstring": "Return the label value of a tree."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "branches(tree)",
            "docstring": "Return the list of branches of the given tree."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "is_tree(tree)",
            "docstring": "Returns True if the given tree is a tree, and False otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "is_leaf(tree)",
            "docstring": "Returns True if the given tree's list of branches is empty, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "print_tree(t, indent=0)",
            "docstring": "Print a representation of this tree in which each node is  indented by two spaces times its depth from the root.  >>> print_tree(tree(1))  1  >>> print_tree(tree(1, [tree(2)]))  1   2  >>> numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])  >>> print_tree(numbers)  1   2   3    4    5   6    7"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "copy_tree(t)",
            "docstring": "Returns a copy of t. Only for testing purposes.  >>> t = tree(5)  >>> copy = copy_tree(t)  >>> t = tree(6)  >>> print_tree(copy)  5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "interval(a, b)",
            "docstring": "Construct an interval from a to b."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "lower_bound(x)",
            "docstring": "Return the lower bound of interval x."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "upper_bound(x)",
            "docstring": "Return the upper bound of interval x."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "str_interval(x)",
            "docstring": "Return a string representation of interval x."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "add_interval(x, y)",
            "docstring": "Return an interval that contains the sum of any value in interval x and  any value in interval y."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "mul_interval(x, y)",
            "docstring": "Return the interval that contains the product of any value in x and any  value in y."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "sub_interval(x, y)",
            "docstring": "Return the interval that contains the difference between any value in x  and any value in y."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "div_interval(x, y)",
            "docstring": "Return the interval that contains the quotient of any value in x divided by  any value in y. Division is implemented as the multiplication of x by the  reciprocal of y."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/hw04.py",
            "function": "quadratic(x, a, b, c)",
            "docstring": "Return the interval that is the range of the quadratic defined by  coefficients a, b, and c, for domain interval x.  >>> str_interval(quadratic(interval(0, 2), -2, 3, -1))  '-3 to 0.125'  >>> str_interval(quadratic(interval(1, 3), 2, -3, 1))  '0 to 10'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/construct_check.py",
            "function": "check(source_file, checked_funcs, disallow, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW  (an object supporting 'in') are not present in the function(s) named  CHECKED_FUNCS in SOURCE. By default, SOURCE is the contents of the  file SOURCE_FILE. CHECKED_FUNCS is either a string (indicating a single  name) or an object of some other type that supports 'in'. CHECKED_FUNCS  may contain __main__ to indicate an entire module. Prints reports of  each prohibited node and returns True iff none are found.  See ast.__dir__() for AST type names. The special node name 'Recursion'  checks for overtly recursive calls (i.e., calls of the form NAME(...) where  NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/construct_check.py",
            "function": "__init__(self, disallow=())",
            "docstring": "DISALLOW is the initial default list of disallowed    node-type names."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/construct_check.py",
            "function": "errors(self)",
            "docstring": "Returns the number of number of prohibited constructs found in    the last call to check."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw04/construct_check.py",
            "function": "check(self, source_file, checked_funcs, disallow=None, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW    (an object supporting the contains test) are not present in    the function(s) named CHECKED_FUNCS in SOURCE. By default, SOURCE    is the contents of the file SOURCE_FILE. DISALLOW defaults to the    argument given to the constructor (and resets that value if it is    present). CHECKED_FUNCS is either a string (indicating a single    name) or an object of some other type that supports 'in'.    CHECKED_FUNCS may contain __main__ to indicate an entire module.    Prints reports of each prohibited node and returns True iff none    are found.    See ast.__dir__() for AST type names. The special node name    'Recursion' checks for overtly recursive calls (i.e., calls of the    form NAME(...) where NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/construct_check.py",
            "function": "check(source_file, checked_funcs, disallow, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW  (an object supporting 'in') are not present in the function(s) named  CHECKED_FUNCS in SOURCE. By default, SOURCE is the contents of the  file SOURCE_FILE. CHECKED_FUNCS is either a string (indicating a single  name) or an object of some other type that supports 'in'. CHECKED_FUNCS  may contain __main__ to indicate an entire module. Prints reports of  each prohibited node and returns True iff none are found.  See ast.__dir__() for AST type names. The special node name 'Recursion'  checks for overtly recursive calls (i.e., calls of the form NAME(...) where  NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/construct_check.py",
            "function": "__init__(self, disallow=())",
            "docstring": "DISALLOW is the initial default list of disallowed    node-type names."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/construct_check.py",
            "function": "errors(self)",
            "docstring": "Returns the number of number of prohibited constructs found in    the last call to check."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/construct_check.py",
            "function": "check(self, source_file, checked_funcs, disallow=None, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW    (an object supporting the contains test) are not present in    the function(s) named CHECKED_FUNCS in SOURCE. By default, SOURCE    is the contents of the file SOURCE_FILE. DISALLOW defaults to the    argument given to the constructor (and resets that value if it is    present). CHECKED_FUNCS is either a string (indicating a single    name) or an object of some other type that supports 'in'.    CHECKED_FUNCS may contain __main__ to indicate an entire module.    Prints reports of each prohibited node and returns True iff none    are found.    See ast.__dir__() for AST type names. The special node name    'Recursion' checks for overtly recursive calls (i.e., calls of the    form NAME(...) where NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "num_sevens(n)",
            "docstring": "Returns the number of times 7 appears as a digit of n.  >>> num_sevens(3)  0  >>> num_sevens(7)  1  >>> num_sevens(7777777)  7  >>> num_sevens(2637)  1  >>> num_sevens(76370)  2  >>> num_sevens(12345)  0  >>> from construct_check import check  >>> # ban all assignment statements  >>> check(HW_SOURCE_FILE, 'num_sevens',  ...    ['Assign', 'AugAssign'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "pingpong(n)",
            "docstring": "Return the nth element of the ping-pong sequence.  >>> pingpong(7)  7  >>> pingpong(8)  6  >>> pingpong(15)  1  >>> pingpong(21)  -1  >>> pingpong(22)  0  >>> pingpong(30)  6  >>> pingpong(68)  2  >>> pingpong(69)  1  >>> pingpong(70)  0  >>> pingpong(71)  1  >>> pingpong(72)  0  >>> pingpong(100)  2  >>> from construct_check import check  >>> # ban assignment statements  >>> check(HW_SOURCE_FILE, 'pingpong', ['Assign', 'AugAssign'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "count_change(amount)",
            "docstring": "Return the number of ways to make change for amount.  >>> count_change(7)  6  >>> count_change(10)  14  >>> count_change(20)  60  >>> count_change(100)  9828  >>> from construct_check import check  >>> # ban iteration  >>> check(HW_SOURCE_FILE, 'count_change', ['While', 'For'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "helper(n, i)",
            "docstring": "Returns the largest power of 2 less than n    :param n:    :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "count_partitions(n, m)",
            "docstring": "Count the ways to partition n using parts up to m."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "flatten(lst)",
            "docstring": "Returns a flattened version of lst.  >>> flatten([1, 2, 3])   # normal list  [1, 2, 3]  >>> x = [1, [2, 3], 4]   # deep list  >>> flatten(x)  [1, 2, 3, 4]  >>> x # Ensure x is not mutated  [1, [2, 3], 4]  >>> x = [[1, [1, 1]], 1, [1, 1]] # deep list  >>> flatten(x)  [1, 1, 1, 1, 1, 1]  >>> x  [[1, [1, 1]], 1, [1, 1]]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "print_move(origin, destination)",
            "docstring": "Print instructions to move a disk."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "move_stack(n, start, end)",
            "docstring": "Print the moves required to move n disks on the start pole to the end  pole without violating the rules of Towers of Hanoi.  n -- number of disks  start -- a pole position, either 1, 2, or 3  end -- a pole position, either 1, 2, or 3  There are exactly three poles, and start and end must be different. Assume  that the start pole has at least n disks of increasing size, and the end  pole is either empty or has a top disk larger than the top n start disks.  >>> move_stack(1, 1, 3)  Move the top disk from rod 1 to rod 3  >>> move_stack(2, 1, 3)  Move the top disk from rod 1 to rod 2  Move the top disk from rod 1 to rod 3  Move the top disk from rod 2 to rod 3  >>> move_stack(3, 1, 3)  Move the top disk from rod 1 to rod 3  Move the top disk from rod 1 to rod 2  Move the top disk from rod 3 to rod 2  Move the top disk from rod 1 to rod 3  Move the top disk from rod 2 to rod 1  Move the top disk from rod 2 to rod 3  Move the top disk from rod 1 to rod 3"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw03/hw03.py",
            "function": "make_anonymous_factorial()",
            "docstring": "Return the value of an expression that computes factorial.  >>> make_anonymous_factorial()(5)  120  >>> from construct_check import check  >>> # ban any assignments or recursion  >>> check(HW_SOURCE_FILE, 'make_anonymous_factorial', ['Assign', 'AugAssign', 'FunctionDef', 'Recursion'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/construct_check.py",
            "function": "check(source_file, checked_funcs, disallow, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW  (an object supporting 'in') are not present in the function(s) named  CHECKED_FUNCS in SOURCE. By default, SOURCE is the contents of the  file SOURCE_FILE. CHECKED_FUNCS is either a string (indicating a single  name) or an object of some other type that supports 'in'. CHECKED_FUNCS  may contain __main__ to indicate an entire module. Prints reports of  each prohibited node and returns True iff none are found.  See ast.__dir__() for AST type names. The special node name 'Recursion'  checks for overtly recursive calls (i.e., calls of the form NAME(...) where  NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/construct_check.py",
            "function": "__init__(self, disallow=())",
            "docstring": "DISALLOW is the initial default list of disallowed    node-type names."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/construct_check.py",
            "function": "errors(self)",
            "docstring": "Returns the number of number of prohibited constructs found in    the last call to check."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/construct_check.py",
            "function": "check(self, source_file, checked_funcs, disallow=None, source=None)",
            "docstring": "Checks that AST nodes whose type names are present in DISALLOW    (an object supporting the contains test) are not present in    the function(s) named CHECKED_FUNCS in SOURCE. By default, SOURCE    is the contents of the file SOURCE_FILE. DISALLOW defaults to the    argument given to the constructor (and resets that value if it is    present). CHECKED_FUNCS is either a string (indicating a single    name) or an object of some other type that supports 'in'.    CHECKED_FUNCS may contain __main__ to indicate an entire module.    Prints reports of each prohibited node and returns True iff none    are found.    See ast.__dir__() for AST type names. The special node name    'Recursion' checks for overtly recursive calls (i.e., calls of the    form NAME(...) where NAME is an enclosing def."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/hw02.py",
            "function": "product(n, term)",
            "docstring": "Return the product of the first n terms in a sequence.  n  -- a positive integer  term -- a function that takes one argument  >>> product(3, identity) # 1 * 2 * 3  6  >>> product(5, identity) # 1 * 2 * 3 * 4 * 5  120  >>> product(3, square)  # 1^2 * 2^2 * 3^2  36  >>> product(5, square)  # 1^2 * 2^2 * 3^2 * 4^2 * 5^2  14400  >>> product(3, increment) # (1+1) * (2+1) * (3+1)  24  >>> product(3, triple)  # 1*3 * 2*3 * 3*3  162"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/hw02.py",
            "function": "accumulate(combiner, base, n, term)",
            "docstring": "Return the result of combining the first n terms in a sequence and base.  The terms to be combined are term(1), term(2), ..., term(n). combiner is a  two-argument commutative, associative function.  >>> accumulate(add, 0, 5, identity) # 0 + 1 + 2 + 3 + 4 + 5  15  >>> accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5  26  >>> accumulate(add, 11, 0, identity) # 11  11  >>> accumulate(add, 11, 3, square)  # 11 + 1^2 + 2^2 + 3^2  25  >>> accumulate(mul, 2, 3, square)  # 2 * 1^2 * 2^2 * 3^2  72  >>> accumulate(lambda x, y: x + y + 1, 2, 3, square)  19"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/hw02.py",
            "function": "summation_using_accumulate(n, term)",
            "docstring": "Returns the sum of term(1) + ... + term(n). The implementation  uses accumulate.  >>> summation_using_accumulate(5, square)  55  >>> summation_using_accumulate(5, triple)  45  >>> from construct_check import check  >>> # ban iteration and recursion  >>> check(HW_SOURCE_FILE, 'summation_using_accumulate',  ...    ['Recursion', 'For', 'While'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/hw02.py",
            "function": "product_using_accumulate(n, term)",
            "docstring": "An implementation of product using accumulate.  >>> product_using_accumulate(4, square)  576  >>> product_using_accumulate(6, triple)  524880  >>> from construct_check import check  >>> # ban iteration and recursion  >>> check(HW_SOURCE_FILE, 'product_using_accumulate',  ...    ['Recursion', 'For', 'While'])  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/hw02.py",
            "function": "compose1(f, g)",
            "docstring": "Return a function h, such that h(x) = f(g(x))."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw02/hw02.py",
            "function": "make_repeater(f, n)",
            "docstring": "Return the function that computes the nth application of f.  >>> add_three = make_repeater(increment, 3)  >>> add_three(5)  8  >>> make_repeater(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1  243  >>> make_repeater(square, 2)(5) # square(square(5))  625  >>> make_repeater(square, 4)(5) # square(square(square(square(5))))  152587890625  >>> make_repeater(square, 0)(5) # Yes, it makes sense to apply the function zero times!   5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "make_counter()",
            "docstring": "Return a counter function.  >>> c = make_counter()  >>> c('a')  1  >>> c('a')  2  >>> c('b')  1  >>> c('a')  3  >>> c2 = make_counter()  >>> c2('b')  1  >>> c2('b')  2  >>> c('b') + c2('b')  5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "preorder(t)",
            "docstring": "Return a list of the entries in this tree in the order that they  would be visited by a preorder traversal (see problem description).  >>> numbers = Tree(1, [Tree(2), Tree(3, [Tree(4), Tree(5)]), Tree(6, [Tree(7)])])  >>> preorder(numbers)  [1, 2, 3, 4, 5, 6, 7]  >>> preorder(Tree(2, [Tree(4, [Tree(6)])]))  [2, 4, 6]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "store_digits(n)",
            "docstring": "Stores the digits of a positive number n in a linked list.  >>> s = store_digits(1)  >>> s  Link(1)  >>> store_digits(2345)  Link(2, Link(3, Link(4, Link(5))))  >>> store_digits(876)  Link(8, Link(7, Link(6)))"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "generate_paths(t, x)",
            "docstring": "Yields all possible paths from the root of t to a node with the label x  as a list.  >>> t1 = Tree(1, [Tree(2, [Tree(3), Tree(4, [Tree(6)]), Tree(5)]), Tree(5)])  >>> print(t1)  1   2    3    4     6    5   5  >>> next(generate_paths(t1, 6))  [1, 2, 4, 6]  >>> path_to_5 = generate_paths(t1, 5)  >>> sorted(list(path_to_5))  [[1, 2, 5], [1, 5]]  >>> t2 = Tree(0, [Tree(2, [t1])])  >>> print(t2)  0   2    1     2      3      4       6      5     5  >>> path_to_2 = generate_paths(t2, 2)  >>> sorted(list(path_to_2))  [[0, 2], [0, 2, 1, 2]]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "remove_all(link, value)",
            "docstring": "Remove all the nodes containing value in link. Assume that the  first element is never removed.  >>> l1 = Link(0, Link(2, Link(2, Link(3, Link(1, Link(2, Link(3)))))))  >>> print(l1)  <0 2 2 3 1 2 3>  >>> remove_all(l1, 2)  >>> print(l1)  <0 3 1 3>  >>> remove_all(l1, 3)  >>> print(l1)  <0 1>  >>> remove_all(l1, 3)  >>> print(l1)  <0 1>"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "deep_map(f, link)",
            "docstring": "Return a Link with the same structure as link but with fn mapped over  its elements. If an element is an instance of a linked list, recursively  apply f inside that linked list as well.  >>> s = Link(1, Link(Link(2, Link(3)), Link(4)))  >>> print(deep_map(lambda x: x * x, s))  <1 <4 9> 16>  >>> print(s) # unchanged  <1 <2 3> 4>  >>> print(deep_map(lambda x: 2 * x, Link(s, Link(Link(Link(5))))))  <<2 <4 6> 8> <<10>>>"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "map(self, fn)",
            "docstring": "Apply a function `fn` to each node in the tree and mutate the tree.    >>> t1 = Tree(1)    >>> t1.map(lambda x: x + 2)    >>> t1.map(lambda x : x * 4)    >>> t1.label    12    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> t2.map(lambda x: x * x)    >>> t2    Tree(9, [Tree(4, [Tree(25)]), Tree(16)])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hw05/hw05.py",
            "function": "__contains__(self, e)",
            "docstring": "Determine whether an element exists in the tree.    >>> t1 = Tree(1)    >>> 1 in t1    True    >>> 8 in t1    False    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> 6 in t2    False    >>> 5 in t2    True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "make_random_strat()",
            "docstring": "Makes a random pure strategy."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "is_over(self)",
            "docstring": "Returns True iff this GameTurn should be over."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "is_successor(self, other)",
            "docstring": "Returns True if another GameTurn is a plausible successor of this    GameTurn. Used for preventing multiple calls to a strategy function    from messing up the tracer (to a reasonable degree)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "set_successor(self, other)",
            "docstring": "Sets another GameTurn as the successor of this GameTurn."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "is_correct(self, sol_hash)",
            "docstring": "Returns True if the hash of this GameTurn matches the solution    hash."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "turn_summary(self)",
            "docstring": "Returns a string containing a description of how who rolled how many    dice this turn."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "turn_rolls(self)",
            "docstring": "Returns a string containing the dice values rolled this turn."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "dice_summary(self)",
            "docstring": "Returns a string containing a summary of the dice values rolled this    turn."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "make_traced(s0, s1, six_sided, four_sided)",
            "docstring": "Given the strategy functions of player 0 and player 1, and six-sided and  four-sided dice, returns traced versions of the function to be used for the  game, as well as a function to retrieve the trace."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "get_trace(score0, score1)",
            "docstring": "Given the final score outcome of the game, returns the trace of the    game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "play_traced(hog, strat0, strat1)",
            "docstring": "Returns the trace of a hog game, given the HOG module, as well as the  player 0 and 1 strategies for the game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "check_play_function(hog)",
            "docstring": "Checks the `play` function of a student's HOG module by running multiple  seeded games, and comparing the results."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "make_solution_traces(hog)",
            "docstring": "Given a reference HOG solution module, returns the hashed solution  trace."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "compare_trace(trace, sol)",
            "docstring": "Compares TRACE with the SOLUTION trace, and returns the turn number  where the two traces differ, or -1 if the traces are the same."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "print_trace(trace, incorrect=None)",
            "docstring": "Prints out the student trace."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "load_traces_from_file(path)",
            "docstring": "Given a file specified by a PATH, returns a trace."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/play_utils.py",
            "function": "write_traces_to_file(path, traces)",
            "docstring": "Given a target file specified by a PATH, and a solution trace, writes  the trace to the file."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/check_strategy.py",
            "function": "check_strategy_roll(score, opponent_score, num_rolls)",
            "docstring": "Raises an error with a helpful message if NUM_ROLLS is an invalid  strategy output. All strategy outputs must be integers from 0 to 10.  >>> check_strategy_roll(10, 20, num_rolls=100)  Traceback (most recent call last):   ...  AssertionError: strategy(10, 20) returned 100 (invalid number of rolls)  >>> check_strategy_roll(20, 10, num_rolls=0.1)  Traceback (most recent call last):   ...  AssertionError: strategy(20, 10) returned 0.1 (not an integer)  >>> check_strategy_roll(0, 0, num_rolls=None)  Traceback (most recent call last):   ...  AssertionError: strategy(0, 0) returned None (not an integer)"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/tests/check_strategy.py",
            "function": "check_strategy(strategy, goal=GOAL_SCORE)",
            "docstring": "Checks the strategy with all valid inputs and verifies that the strategy  returns a valid output. Use `check_strategy_roll` to raise an error with a  helpful message if the strategy returns an invalid output.  >>> def fail_15_20(score, opponent_score):  ...   if score != 15 or opponent_score != 20:  ...     return 5  ...  >>> check_strategy(fail_15_20)  Traceback (most recent call last):   ...  AssertionError: strategy(15, 20) returned None (not an integer)  >>> def fail_102_115(score, opponent_score):  ...   if score == 102 and opponent_score == 115:  ...     return 100  ...   return 5  ...  >>> check_strategy(fail_102_115)  >>> fail_102_115 == check_strategy(fail_102_115, 120)  Traceback (most recent call last):   ...  AssertionError: strategy(102, 115) returned 100 (invalid number of rolls)"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/dice.py",
            "function": "make_fair_dice(sides)",
            "docstring": "Return a die that returns 1 to SIDES with equal chance."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/dice.py",
            "function": "make_test_dice(*outcomes)",
            "docstring": "Return a die that cycles deterministically through OUTCOMES.  >>> dice = make_test_dice(1, 2, 3)  >>> dice()  1  >>> dice()  2  >>> dice()  3  >>> dice()  1  >>> dice()  2  This function uses Python syntax/techniques not yet covered in this course.  The best way to understand it is by reading the documentation and examples."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "roll_dice(num_rolls, dice=six_sided)",
            "docstring": "Simulate rolling the DICE exactly NUM_ROLLS > 0 times. Return the sum of  the outcomes unless any of the outcomes is 1. In that case, return 1.  num_rolls: The number of dice rolls that will be made.  dice:    A function that simulates a single dice roll outcome."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "free_bacon(score)",
            "docstring": "Return the points scored from rolling 0 dice (Free Bacon).  score: The opponent's current score."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "take_turn(num_rolls, opponent_score, dice=six_sided)",
            "docstring": "Simulate a turn rolling NUM_ROLLS dice, which may be 0 (Free Bacon).  Return the points scored for the turn by the current player.  num_rolls:    The number of dice rolls that will be made.  opponent_score: The total score of the opponent.  dice:      A function that simulates a single dice roll outcome."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "is_swap(player_score, opponent_score)",
            "docstring": "Return whether the two scores should be swapped"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "other(player)",
            "docstring": "Return the other player, for a player PLAYER numbered 0 or 1.  >>> other(0)  1  >>> other(1)  0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "silence(score0, score1)",
            "docstring": "Announce nothing (see Phase 2)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "say_scores(score0, score1)",
            "docstring": "A commentary function that announces the score for each player."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "announce_lead_changes(previous_leader=None)",
            "docstring": "Return a commentary function that announces lead changes.  >>> f0 = announce_lead_changes()  >>> f1 = f0(5, 0)  Player 0 takes the lead by 5  >>> f2 = f1(5, 12)  Player 1 takes the lead by 7  >>> f3 = f2(8, 12)  >>> f4 = f3(8, 13)  >>> f5 = f4(15, 13)  Player 0 takes the lead by 2"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "both(f, g)",
            "docstring": "Return a commentary function that says what f says, then what g says.  NOTE: the following game is not possible under the rules, it's just  an example for the sake of the doctest  >>> h0 = both(say_scores, announce_lead_changes())  >>> h1 = h0(10, 0)  Player 0 now has 10 and Player 1 now has 0  Player 0 takes the lead by 10  >>> h2 = h1(10, 6)  Player 0 now has 10 and Player 1 now has 6  >>> h3 = h2(6, 17)  Player 0 now has 6 and Player 1 now has 17  Player 1 takes the lead by 11"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "announce_highest(who, previous_high=0, previous_score=0)",
            "docstring": "Return a commentary function that announces when WHO's score  increases by more than ever before in the game.  NOTE: the following game is not possible under the rules, it's just  an example for the sake of the doctest  >>> f0 = announce_highest(1) # Only announce Player 1 score gains  >>> f1 = f0(12, 0)  >>> f2 = f1(12, 11)  11 point(s)! That's the biggest gain yet for Player 1  >>> f3 = f2(20, 11)  >>> f4 = f3(13, 20)  >>> f5 = f4(20, 35)  15 point(s)! That's the biggest gain yet for Player 1  >>> f6 = f5(20, 47) # Player 1 gets 12 points; not enough for a new high  >>> f7 = f6(21, 47)  >>> f8 = f7(21, 77)  30 point(s)! That's the biggest gain yet for Player 1  >>> f9 = f8(77, 22) # Swap!  >>> f10 = f9(33, 77) # Swap!  55 point(s)! That's the biggest gain yet for Player 1"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "always_roll(n)",
            "docstring": "Return a strategy that always rolls N dice.  A strategy is a function that takes two total scores as arguments (the  current player's score, and the opponent's score), and returns a number of  dice that the current player will roll this turn.  >>> strategy = always_roll(5)  >>> strategy(0, 0)  5  >>> strategy(99, 99)  5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "make_averaged(fn, num_samples=1000)",
            "docstring": "Return a function that returns the average value of FN when called.  To implement this function, you will have to use *args syntax, a new Python  feature introduced in this project. See the project description.  >>> dice = make_test_dice(4, 2, 5, 1)  >>> averaged_dice = make_averaged(dice, 1000)  >>> averaged_dice()  3.0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "max_scoring_num_rolls(dice=six_sided, num_samples=1000)",
            "docstring": "Return the number of dice (1 to 10) that gives the highest average turn  score by calling roll_dice with the provided DICE over NUM_SAMPLES times.  Assume that the dice always return positive outcomes.  >>> dice = make_test_dice(1, 6)  >>> max_scoring_num_rolls(dice)  1"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "winner(strategy0, strategy1)",
            "docstring": "Return 0 if strategy0 wins against strategy1, and 1 otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "average_win_rate(strategy, baseline=always_roll(4))",
            "docstring": "Return the average win rate of STRATEGY against BASELINE. Averages the  winrate when starting the game as player 0 and as player 1."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "run_experiments()",
            "docstring": "Run a series of strategy experiments and report results."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "bacon_strategy(score, opponent_score, margin=8, num_rolls=4)",
            "docstring": "This strategy rolls 0 dice if that gives at least MARGIN points, and  rolls NUM_ROLLS otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "swap_strategy(score, opponent_score, margin=8, num_rolls=4)",
            "docstring": "This strategy rolls 0 dice when it triggers a beneficial swap. It also  rolls 0 dice if it gives at least MARGIN points and does not trigger a  non-beneficial swap. Otherwise, it rolls NUM_ROLLS."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "final_strategy(score, opponent_score)",
            "docstring": "Write a brief description of your final strategy.  *** YOUR DESCRIPTION HERE ***"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog.py",
            "function": "run(*args)",
            "docstring": "Read in the command-line argument and calls corresponding functions.  This function uses Python syntax/techniques not yet covered in this course."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/ucb.py",
            "function": "main(fn)",
            "docstring": "Call fn with command line arguments. Used as a decorator.  The main decorator marks the function that starts a program. For example,  @main  def my_run_function():    # function body  Use this instead of the typical __name__ == \"__main__\" predicate."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/ucb.py",
            "function": "trace(fn)",
            "docstring": "A decorator that prints a function's name, its arguments, and its return  values each time the function is called. For example,  @trace  def compute_something(x, y):    # function body"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/ucb.py",
            "function": "log(message)",
            "docstring": "Print an indented message (used with trace)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/ucb.py",
            "function": "log_current_line()",
            "docstring": "Print information about the current line of code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/ucb.py",
            "function": "interact(msg=None)",
            "docstring": "Start an interactive interpreter session in the current environment.  On Unix:   <Control>-D exits the interactive session and returns to normal execution.  In Windows:   <Control>-Z <Enter> exits the interactive session and returns to normal   execution."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "name(who)",
            "docstring": "Return the name of a player."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "__init__(self, parent, computer=False)",
            "docstring": "Replace hog module's dice with hooks to GUI and start a game.    parent  -- parent widget (should be root)    computer -- True if playing against a computer"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "init_scores(self)",
            "docstring": "Creates child widgets associated with scoring.    Each player has a score Label that is updated each turn. Scores can be    accessed and modified through Tkinter variables in self.score_vars."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "init_rolls(self)",
            "docstring": "Creates child widgets associated with the number of rolls.    The primary widget is an Entry that accepts user input. An intermediate    Tkinter variable, self.roll_verified, is set to the final number of    rolls. Once it is updated, the player immediately takes a turn based on    its value."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "init_dice(self)",
            "docstring": "Creates child widgets associated with dice. Each dice is stored in a    Label. Dice Labels will be packed or unpacked depending on how many dice    are rolled."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "init_status(self)",
            "docstring": "Creates child widgets associated with the game status. For example,    Hog Wild is displayed here."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "init_messages(self)",
            "docstring": "Creates child widgets associated with game messages."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "init_restart(self)",
            "docstring": "Creates child widgets associated with restarting the game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "make_dice(self, sides)",
            "docstring": "Creates a dice function that hooks to the GUI and wraps    dice.make_fair_dice.    sides -- number of sides for the die"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "gui_dice()",
            "docstring": "Roll fair_dice and add a corresponding image to self.dice."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "clear_dice(self)",
            "docstring": "Unpacks (hides) all dice Labels."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "roll(self)",
            "docstring": "Verify and set the number of rolls based on user input. As    per game rules, a valid number of rolls must be an integer    greater than or equal to 0."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "switch(self, who=None)",
            "docstring": "Switches players. self.who is either 0 or 1."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "strategy(self, score, opp_score)",
            "docstring": "A strategy with a hook to the GUI. This strategy gets    passed into the PLAY function from the HOG module. At its    core, the strategy waits until a number of rolls has been    verified, then returns that number. Game information is    updated as well.    score   -- player's score    opp_score -- opponent's score"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "play(self)",
            "docstring": "Simulates a game of Hog by calling hog.play with the GUI strategies.    If the player destroys the window prematurely (i.e. in the    middle of a game), a HogGUIException is raised to exit out    of play's loop. Otherwise, the widget will be destroyed,    but the strategy will continue waiting."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "restart(self)",
            "docstring": "Kills the current game and begins another game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "destroy(self)",
            "docstring": "Overrides the destroy method to end the current game."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/hog/hog_gui.py",
            "function": "run_GUI(computer=False)",
            "docstring": "Start the GUI.  computer -- True if playing against computer"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07/lab07.py",
            "function": "naturals()",
            "docstring": "A generator function that yields the infinite sequence of natural  numbers, starting at 1.  >>> m = naturals()  >>> type(m)  <class 'generator'>  >>> [next(m) for _ in range(10)]  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07/lab07.py",
            "function": "scale(s, k)",
            "docstring": "Yield elements  of the iterable s scaled by a number k.  >>> s = scale([1, 5, 2], 5)  >>> type(s)  <class 'generator'>  >>> list(s)  [5, 25, 10]  >>> m = scale(naturals(), 2)  >>> [next(m) for _ in range(5)]  [2, 4, 6, 8, 10]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07/lab07.py",
            "function": "link_to_list(link)",
            "docstring": "Takes a linked list and returns a Python list with the same elements.  >>> link = Link(1, Link(2, Link(3, Link(4))))  >>> link_to_list(link)  [1, 2, 3, 4]  >>> link_to_list(Link.empty)  []"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07/lab07.py",
            "function": "cumulative_sum(t)",
            "docstring": "Mutates t so that each node's label becomes the sum of all labels in  the corresponding subtree rooted at t.  >>> t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])  >>> cumulative_sum(t)  >>> t  Tree(16, [Tree(8, [Tree(5)]), Tree(7)])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07/lab07.py",
            "function": "is_bst(t)",
            "docstring": "Returns True if the Tree t has the structure of a valid BST.  >>> t1 = Tree(6, [Tree(2, [Tree(1), Tree(4)]), Tree(7, [Tree(7), Tree(8)])])  >>> is_bst(t1)  True  >>> t2 = Tree(8, [Tree(2, [Tree(9), Tree(1)]), Tree(3, [Tree(6)]), Tree(5)])  >>> is_bst(t2)  False  >>> t3 = Tree(6, [Tree(2, [Tree(4), Tree(1)]), Tree(7, [Tree(7), Tree(8)])])  >>> is_bst(t3)  False  >>> t4 = Tree(1, [Tree(2, [Tree(3, [Tree(4)])])])  >>> is_bst(t4)  True  >>> t5 = Tree(1, [Tree(0, [Tree(-1, [Tree(-2)])])])  >>> is_bst(t5)  True  >>> t6 = Tree(1, [Tree(4, [Tree(2, [Tree(3)])])])  >>> is_bst(t6)  True  >>> t7 = Tree(2, [Tree(1, [Tree(5)]), Tree(4)])  >>> is_bst(t7)  False"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab00/lab00.py",
            "function": "twenty_nineteen()",
            "docstring": "Come up with the most creative expression that evaluates to 2019,  using only numbers and the +, *, and - operators.  >>> twenty_nineteen()  2019"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab09/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "press(self, info)",
            "docstring": "Takes in a position of the button pressed, and    returns that button's output"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "typing(self, typing_input)",
            "docstring": "Takes in a list of positions of buttons pressed, and    returns the total output"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "__init__(self, pos, key)",
            "docstring": "Creates a button"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "make_advanced_counter_maker()",
            "docstring": "Makes a function that makes counters that understands the  messages \"count\", \"global-count\", \"reset\", and \"global-reset\".  See the examples below:  >>> make_counter = make_advanced_counter_maker()  >>> tom_counter = make_counter()  >>> tom_counter('count')  1  >>> tom_counter('count')  2  >>> tom_counter('global-count')  1  >>> jon_counter = make_counter()  >>> jon_counter('global-count')  2  >>> jon_counter('count')  1  >>> jon_counter('reset')  >>> jon_counter('count')  1  >>> tom_counter('count')  3  >>> jon_counter('global-count')  3  >>> jon_counter('global-reset')  >>> tom_counter('global-count')  1"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "trade(first, second)",
            "docstring": "Exchange the smallest prefixes of first and second that have equal sum.  >>> a = [1, 1, 3, 2, 1, 1, 4]  >>> b = [4, 3, 2, 7]  >>> trade(a, b) # Trades 1+1+3+2=7 for 4+3=7  'Deal!'  >>> a  [4, 3, 1, 1, 4]  >>> b  [1, 1, 3, 2, 2, 7]  >>> c = [3, 3, 2, 4, 1]  >>> trade(b, c)  'No deal!'  >>> b  [1, 1, 3, 2, 2, 7]  >>> c  [3, 3, 2, 4, 1]  >>> trade(a, c)  'Deal!'  >>> a  [3, 3, 2, 1, 4]  >>> b  [1, 1, 3, 2, 2, 7]  >>> c  [4, 3, 1, 4, 1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "card(n)",
            "docstring": "Return the playing card numeral as a string for a positive n <= 13."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "shuffle(cards)",
            "docstring": "Return a shuffled list that interleaves the two halves of cards.  >>> shuffle(range(6))  [0, 3, 1, 4, 2, 5]  >>> suits = ['♡', '♢', '♤', '♧']  >>> cards = [card(n) + suit for n in range(1,14) for suit in suits]  >>> cards[:12]  ['A♡', 'A♢', 'A♤', 'A♧', '2♡', '2♢', '2♤', '2♧', '3♡', '3♢', '3♤', '3♧']  >>> cards[26:30]  ['7♤', '7♧', '8♡', '8♢']  >>> shuffle(cards)[:12]  ['A♡', '7♤', 'A♢', '7♧', 'A♤', '8♡', 'A♧', '8♢', '2♡', '8♤', '2♢', '8♧']  >>> shuffle(shuffle(cards))[:12]  ['A♡', '4♢', '7♤', '10♧', 'A♢', '4♤', '7♧', 'J♡', 'A♤', '4♧', '8♡', 'J♢']  >>> cards[:12] # Should not be changed  ['A♡', 'A♢', 'A♤', 'A♧', '2♡', '2♢', '2♤', '2♧', '3♡', '3♢', '3♤', '3♧']"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "permutations(seq)",
            "docstring": "Generates all permutations of the given sequence. Each permutation is a  list of the elements in SEQ in a different order. The permutations may be  yielded in any order.  >>> perms = permutations([100])  >>> type(perms)  <class 'generator'>  >>> next(perms)  [100]  >>> try:  ...   next(perms)  ... except StopIteration:  ...   print('No more permutations!')  No more permutations!  >>> sorted(permutations([1, 2, 3])) # Returns a sorted list containing elements of the generator  [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]  >>> sorted(permutations((10, 20, 30)))  [[10, 20, 30], [10, 30, 20], [20, 10, 30], [20, 30, 10], [30, 10, 20], [30, 20, 10]]  >>> sorted(permutations(\"ab\"))  [['a', 'b'], ['b', 'a']]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "deep_len(lnk)",
            "docstring": "Returns the deep length of a possibly deep linked list.  >>> deep_len(Link(1, Link(2, Link(3))))  3  >>> deep_len(Link(Link(1, Link(2)), Link(3, Link(4))))  4  >>> levels = Link(Link(Link(1, Link(2)), \\      Link(3)), Link(Link(4), Link(5)))  >>> print(levels)  <<<1 2> 3> <4> 5>  >>> deep_len(levels)  5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "make_to_string(front, mid, back, empty_repr)",
            "docstring": "Returns a function that turns linked lists to strings.  >>> kevins_to_string = make_to_string(\"[\", \"|-]-->\", \"\", \"[]\")  >>> jerrys_to_string = make_to_string(\"(\", \" . \", \")\", \"()\")  >>> lst = Link(1, Link(2, Link(3, Link(4))))  >>> kevins_to_string(lst)  '[1|-]-->[2|-]-->[3|-]-->[4|-]-->[]'  >>> kevins_to_string(Link.empty)  '[]'  >>> jerrys_to_string(lst)  '(1 . (2 . (3 . (4 . ()))))'  >>> jerrys_to_string(Link.empty)  '()'"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "prune_small(t, n)",
            "docstring": "Prune the tree mutatively, keeping only the n branches  of each node with the smallest label.  >>> t1 = Tree(6)  >>> prune_small(t1, 2)  >>> t1  Tree(6)  >>> t2 = Tree(6, [Tree(3), Tree(4)])  >>> prune_small(t2, 1)  >>> t2  Tree(6, [Tree(3)])  >>> t3 = Tree(6, [Tree(1), Tree(3, [Tree(1), Tree(2), Tree(3)]), Tree(5, [Tree(3), Tree(4)])])  >>> prune_small(t3, 2)  >>> t3  Tree(6, [Tree(1), Tree(3, [Tree(1), Tree(2)])])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "num_trees(n)",
            "docstring": "How many full binary trees have exactly n leaves? E.g.,  1  2    3    3  ...  *  *    *    *    / \\   / \\   / \\   *  *  *  *  *  *       / \\     / \\       *  *    *  *  >>> num_trees(1)  1  >>> num_trees(2)  1  >>> num_trees(3)  2  >>> num_trees(8)  429"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "map(self, fn)",
            "docstring": "Apply a function `fn` to each node in the tree and mutate the tree.    >>> t1 = Tree(1)    >>> t1.map(lambda x: x + 2)    >>> t1.map(lambda x : x * 4)    >>> t1.label    12    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> t2.map(lambda x: x * x)    >>> t2    Tree(9, [Tree(4, [Tree(25)]), Tree(16)])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08_extra.py",
            "function": "__contains__(self, e)",
            "docstring": "Determine whether an element exists in the tree.    >>> t1 = Tree(1)    >>> 1 in t1    True    >>> 8 in t1    False    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> 6 in t2    False    >>> 5 in t2    True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08.py",
            "function": "insert(link, value, index)",
            "docstring": "Insert a value into a Link at the given index.  >>> link = Link(1, Link(2, Link(3)))  >>> print(link)  <1 2 3>  >>> insert(link, 9001, 0)  >>> print(link)  <9001 1 2 3>  >>> insert(link, 100, 2)  >>> print(link)  <9001 1 100 2 3>  >>> insert(link, 4, 5)  IndexError"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08.py",
            "function": "insert_into_all(item, nested_list)",
            "docstring": "Assuming that nested_list is a list of lists, return a new list  consisting of all the lists in nested_list, but with item added to  the front of each.  >>> nl = [[], [1, 2], [3]]  >>> insert_into_all(0, nl)  [[0], [0, 1, 2], [0, 3]]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08.py",
            "function": "subseqs(s)",
            "docstring": "Assuming that S is a list, return a nested list of all subsequences  of S (a list of lists). The subsequences can appear in any order.  >>> seqs = subseqs([1, 2, 3])  >>> sorted(seqs)  [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]  >>> subseqs([])  [[]]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08.py",
            "function": "inc_subseqs(s)",
            "docstring": "Assuming that S is a list, return a nested list of all subsequences  of S (a list of lists) for which the elements of the subsequence  are strictly nondecreasing. The subsequences can appear in any order.  >>> seqs = inc_subseqs([1, 3, 2])  >>> sorted(seqs)  [[], [1], [1, 2], [1, 3], [2], [3]]  >>> inc_subseqs([])  [[]]  >>> seqs2 = inc_subseqs([1, 1, 2])  >>> sorted(seqs2)  [[], [1], [1], [1, 1], [1, 1, 2], [1, 2], [1, 2], [2]]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08.py",
            "function": "map(self, fn)",
            "docstring": "Apply a function `fn` to each node in the tree and mutate the tree.    >>> t1 = Tree(1)    >>> t1.map(lambda x: x + 2)    >>> t1.map(lambda x : x * 4)    >>> t1.label    12    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> t2.map(lambda x: x * x)    >>> t2    Tree(9, [Tree(4, [Tree(25)]), Tree(16)])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab08/lab08.py",
            "function": "__contains__(self, e)",
            "docstring": "Determine whether an element exists in the tree.    >>> t1 = Tree(1)    >>> 1 in t1    True    >>> 8 in t1    False    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> 6 in t2    False    >>> 5 in t2    True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab01/lab01_extra.py",
            "function": "falling(n, k)",
            "docstring": "Compute the falling factorial of n to depth k.  >>> falling(6, 3) # 6 * 5 * 4  120  >>> falling(4, 3) # 4 * 3 * 2  24  >>> falling(4, 1) # 4  4  >>> falling(4, 0)  1"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab01/lab01_extra.py",
            "function": "double_eights(n)",
            "docstring": "Return true if n has two eights in a row.  >>> double_eights(8)  False  >>> double_eights(88)  True  >>> double_eights(2882)  True  >>> double_eights(880088)  True  >>> double_eights(12345)  False  >>> double_eights(80808080)  False"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab01/lab01.py",
            "function": "both_positive(x, y)",
            "docstring": "Returns True if both x and y are positive.  >>> both_positive(-1, 1)  False  >>> both_positive(1, 1)  True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab01/lab01.py",
            "function": "sum_digits(n)",
            "docstring": "Sum all the digits of n.  >>> sum_digits(10) # 1 + 0 = 1  1  >>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12  12  >>> sum_digits(1234567890)  45  >>> x = sum_digits(123) # make sure that you are using return rather than print  >>> x  6"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/lab06.py",
            "function": "make_adder_inc(n)",
            "docstring": ">>> adder1 = make_adder_inc(5)  >>> adder2 = make_adder_inc(6)  >>> adder1(2)   7  >>> adder1(2) # 5 + 2 + 1  8  >>> adder1(10) # 5 + 10 + 2  17  >>> [adder1(x) for x in [1, 2, 3]]  [9, 11, 13]  >>> adder2(5)  11"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "__init__(self, name, attack, ense)",
            "docstring": "Create a Card object with a name, attack,    and defense.    >>> staff_member = Card('staff', 400, 300)    >>> staff_member.name    'staff'    >>> staff_member.attack    400    >>> staff_member.defense    300    >>> other_staff = Card('other', 300, 500)    >>> other_staff.attack    300    >>> other_staff.defense    500"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "power(self, other_card)",
            "docstring": "Calculate power as:    (player card's attack) - (opponent card's defense)/2    where other_card is the opponent's card.    >>> staff_member = Card('staff', 400, 300)    >>> other_staff = Card('other', 300, 500)    >>> staff_member.power(other_staff)    150.0    >>> other_staff.power(staff_member)    150.0    >>> third_card = Card('third', 200, 400)    >>> staff_member.power(third_card)    200.0    >>> third_card.power(staff_member)    50.0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "effect(self, other_card, player, opponent)",
            "docstring": "Cards have no default effect."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "__repr__(self)",
            "docstring": "Returns a string which is a readable version of    a card, in the form:    <cardname>: <cardtype>, [<attack>, <defense>]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "copy(self)",
            "docstring": "Returns a copy of this card."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "__init__(self, deck, name)",
            "docstring": "Initialize a Player object.    A Player starts the game by drawing 5 cards from their deck. Each turn,    a Player draws another card from the deck and chooses one to play.    >>> test_card = Card('test', 100, 100)    >>> test_deck = Deck([test_card.copy() for _ in range(6)])    >>> test_player = Player(test_deck, 'tester')    >>> len(test_deck.cards)    1    >>> len(test_player.hand)    5"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "draw(self)",
            "docstring": "Draw a card from the player's deck and add it to their hand.    >>> test_card = Card('test', 100, 100)    >>> test_deck = Deck([test_card.copy() for _ in range(6)])    >>> test_player = Player(test_deck, 'tester')    >>> test_player.draw()    >>> len(test_deck.cards)    0    >>> len(test_player.hand)    6"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "play(self, card_index)",
            "docstring": "Remove and return a card from the player's hand at the given index.    >>> from cards import *    >>> test_player = Player(standard_deck, 'tester')    >>> ta1, ta2 = TACard(\"ta_1\", 300, 400), TACard(\"ta_2\", 500, 600)    >>> tutor1, tutor2 = TutorCard(\"t1\", 200, 500), TutorCard(\"t2\", 600, 400)    >>> test_player.hand = [ta1, ta2, tutor1, tutor2]    >>> test_player.play(0) is ta1    True    >>> test_player.play(2) is tutor2    True    >>> len(test_player.hand)    2"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "display_hand(self)",
            "docstring": "Display the player's current hand to the user."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "play_random(self)",
            "docstring": "Play a random card from hand."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "effect(self, other_card, player, opponent)",
            "docstring": "Discard the first 3 cards in the opponent's hand and have    them draw the same number of cards from their deck.    >>> from cards import *    >>> player1, player2 = Player(player_deck, 'p1'), Player(opponent_deck, 'p2')    >>> other_card = Card('other', 500, 500)    >>> tutor_test = TutorCard('Tutor', 500, 500)    >>> initial_deck_length = len(player2.deck.cards)    >>> tutor_test.effect(other_card, player1, player2)    p2 discarded and re-drew 3 cards!    >>> len(player2.hand)    5    >>> len(player2.deck.cards) == initial_deck_length - 3    True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "copy(self)",
            "docstring": "Create a copy of this card."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "effect(self, other_card, player, opponent)",
            "docstring": "Swap the attack and defense of an opponent's card.    >>> from cards import *    >>> player1, player2 = Player(player_deck, 'p1'), Player(opponent_deck, 'p2')    >>> other_card = Card('other', 300, 600)    >>> ta_test = TACard('TA', 500, 500)    >>> ta_test.effect(other_card, player1, player2)    >>> other_card.attack    600    >>> other_card.defense    300"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "copy(self)",
            "docstring": "Create a copy of this card."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "effect(self, other_card, player, opponent)",
            "docstring": "Adds the attack and defense of the opponent's card to    all cards in the player's deck, then removes all cards    in the opponent's deck that share an attack or defense    stat with the opponent's card.    >>> test_card = Card('card', 300, 300)    >>> professor_test = ProfessorCard('Professor', 500, 500)    >>> opponent_card = test_card.copy()    >>> test_deck = Deck([test_card.copy() for _ in range(8)])    >>> player1, player2 = Player(test_deck.copy(), 'p1'), Player(test_deck.copy(), 'p2')    >>> professor_test.effect(opponent_card, player1, player2)    3 cards were discarded from p2's deck!    >>> [(card.attack, card.defense) for card in player1.deck.cards]    [(600, 600), (600, 600), (600, 600)]    >>> len(player2.deck.cards)    0"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "__init__(self, cards)",
            "docstring": "With a list of cards as input, create a deck.    This deck should keep track of the cards it contains, and    we should be able to draw from the deck, taking a random    card out of it."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "draw(self)",
            "docstring": "Draw a random card and remove it from the deck."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "copy(self)",
            "docstring": "Create a copy of this deck."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "__init__(self, player1, player2)",
            "docstring": "Initialize a game of <REPLACE NAME>."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "play_round(self, p1_card, p2_card)",
            "docstring": "After each player picks a card, play them against    each other."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "game_won(self)",
            "docstring": "Check if the game is won and, if so,    which player won."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab06/classes.py",
            "function": "display_scores(self)",
            "docstring": "Display players' scores to the user."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07 2/lab07.py",
            "function": "scale(s, k)",
            "docstring": "Yield elements of the iterable s scaled by a number k.  >>> s = scale([1, 5, 2], 5)  >>> type(s)  <class 'generator'>  >>> list(s)  [5, 25, 10]  >>> m = scale(naturals(), 2)  >>> [next(m) for _ in range(5)]  [2, 4, 6, 8, 10]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07 2/lab07.py",
            "function": "link_to_list(link)",
            "docstring": "Takes a linked list and returns a Python list with the same elements.  >>> link = Link(1, Link(2, Link(3, Link(4))))  >>> link_to_list(link)  [1, 2, 3, 4]  >>> link_to_list(Link.empty)  []"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07 2/lab07.py",
            "function": "cumulative_sum(t)",
            "docstring": "Mutates t so that each node's label becomes the sum of all labels in  the corresponding subtree rooted at t.  >>> t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])  >>> cumulative_sum(t)  >>> t  Tree(16, [Tree(8, [Tree(5)]), Tree(7)])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab07 2/lab07.py",
            "function": "is_bst(t)",
            "docstring": "Returns True if the Tree t has the structure of a valid BST.  >>> t1 = Tree(6, [Tree(2, [Tree(1), Tree(4)]), Tree(7, [Tree(7), Tree(8)])])  >>> is_bst(t1)  True  >>> t2 = Tree(8, [Tree(2, [Tree(9), Tree(1)]), Tree(3, [Tree(6)]), Tree(5)])  >>> is_bst(t2)  False  >>> t3 = Tree(6, [Tree(2, [Tree(4), Tree(1)]), Tree(7, [Tree(7), Tree(8)])])  >>> is_bst(t3)  False  >>> t4 = Tree(1, [Tree(2, [Tree(3, [Tree(4)])])])  >>> is_bst(t4)  True  >>> t5 = Tree(1, [Tree(0, [Tree(-1, [Tree(-2)])])])  >>> is_bst(t5)  True  >>> t6 = Tree(1, [Tree(4, [Tree(2, [Tree(3)])])])  >>> is_bst(t6)  True  >>> t7 = Tree(2, [Tree(1, [Tree(5)]), Tree(4)])  >>> is_bst(t7)  False"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab12/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/lab14_extra.py",
            "function": "num_splits(s, d)",
            "docstring": "Return the number of ways in which s can be partitioned into two  sublists that have sums within d of each other.  >>> num_splits([1, 5, 4], 0) # splits to [1, 4] and [5]  1  >>> num_splits([6, 1, 3], 1) # no split possible  0  >>> num_splits([-2, 1, 3], 2) # [-2, 3], [1] and [-2, 1, 3], []  2  >>> num_splits([1, 4, 6, 8, 2, 9, 5], 3)  12"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/lab14_extra.py",
            "function": "insert(link, value, index)",
            "docstring": "Insert a value into a Link at the given index.  >>> link = Link(1, Link(2, Link(3)))  >>> print(link)  <1 2 3>  >>> insert(link, 9001, 0)  >>> print(link)  <9001 1 2 3>  >>> insert(link, 100, 2)  >>> print(link)  <9001 1 100 2 3>  >>> insert(link, 4, 5)  IndexError"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/lab14.py",
            "function": "prune_min(t)",
            "docstring": "Prune the tree mutatively from the bottom up.  >>> t1 = Tree(6)  >>> prune_min(t1)  >>> t1  Tree(6)  >>> t2 = Tree(6, [Tree(3), Tree(4)])  >>> prune_min(t2)  >>> t2  Tree(6, [Tree(3)])  >>> t3 = Tree(6, [Tree(3, [Tree(1), Tree(2)]), Tree(5, [Tree(3), Tree(4)])])  >>> prune_min(t3)  >>> t3  Tree(6, [Tree(3, [Tree(1)])])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/lab14.py",
            "function": "map(self, fn)",
            "docstring": "Apply a function `fn` to each node in the tree and mutate the tree.    >>> t1 = Tree(1)    >>> t1.map(lambda x: x + 2)    >>> t1.map(lambda x : x * 4)    >>> t1.label    12    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> t2.map(lambda x: x * x)    >>> t2    Tree(9, [Tree(4, [Tree(25)]), Tree(16)])"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/lab14.py",
            "function": "__contains__(self, e)",
            "docstring": "Determine whether an element exists in the tree.    >>> t1 = Tree(1)    >>> 1 in t1    True    >>> 8 in t1    False    >>> t2 = Tree(3, [Tree(2, [Tree(5)]), Tree(4)])    >>> 6 in t2    False    >>> 5 in t2    True"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/execution_parser.py",
            "function": "tokenize(buffer TokenBuffer)",
            "docstring": ">>> buff = TokenBuffer([\"(1 (2 cat) (cat+dog-2 (5 6) ) )\"])  >>> tokenize(buff)  [(1 (2 cat) (cat+dog-2 (5 6)))]  >>> buff = TokenBuffer([\"(1 . 2)\"])  >>> tokenize(buff)  [(1 . 2)]  >>> buff = TokenBuffer([\"(1 2 . 3)\"])  >>> tokenize(buff)  [(1 2 . 3)]  >>> buff = TokenBuffer([\"1\"])  >>> tokenize(buff)  [1]"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "escape(text, quote=False, smart_amp=True)",
            "docstring": "Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.  The original cgi.escape will always escape \"&\", but you can control  this one for a smart escape amp.  :param quote: if set to True, \" and ' will be escaped.  :param smart_amp: if set to False, & will always be escaped."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "escape_link(url)",
            "docstring": "Remove dangerous URL schemes like javascript: and escape afterwards."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "parse_lheading(self, m)",
            "docstring": "Parse setext heading."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "hard_wrap(self)",
            "docstring": "Grammar for hard wrap linebreak. You don't need to add two    spaces at the end of a line."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "placeholder(self)",
            "docstring": "Returns the default, empty output value for the renderer.    All renderer methods use the '+=' operator to append to this value.    Default is a string so rendering HTML can build up a result string with    the rendered Markdown.    Can be overridden by Renderer subclasses to be types like an empty    list, allowing the renderer to create a tree-like structure to    represent the document (which can then be reprocessed later into a    separate format like docx or pdf)."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "block_code(self, code, lang=None)",
            "docstring": "Rendering block level code. ``pre > code``.    :param code: text content of the code block.    :param lang: language of the given code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "block_quote(self, text)",
            "docstring": "Rendering <blockquote> with the given text.    :param text: text content of the blockquote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "block_html(self, html)",
            "docstring": "Rendering block level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "header(self, text, level, raw=None)",
            "docstring": "Rendering header/heading tags like ``<h1>`` ``<h2>``.    :param text: rendered text content for the header.    :param level: a number for the header level, for example: 1.    :param raw: raw text content of the header."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "hrule(self)",
            "docstring": "Rendering method for ``<hr>`` tag."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "list(self, body, ordered=True)",
            "docstring": "Rendering list tags like ``<ul>`` and ``<ol>``.    :param body: body contents of the list.    :param ordered: whether this list is ordered or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "list_item(self, text)",
            "docstring": "Rendering list item snippet. Like ``<li>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "paragraph(self, text)",
            "docstring": "Rendering paragraph tags. Like ``<p>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "table(self, header, body)",
            "docstring": "Rendering table element. Wrap header and body in it.    :param header: header part of the table.    :param body: body part of the table."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "table_row(self, content)",
            "docstring": "Rendering a table row. Like ``<tr>``.    :param content: content of current table row."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "table_cell(self, content, **flags)",
            "docstring": "Rendering a table cell. Like ``<th>`` ``<td>``.    :param content: content of current table cell.    :param header: whether this is header or not.    :param align: align of current table cell."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "double_emphasis(self, text)",
            "docstring": "Rendering **strong** text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "emphasis(self, text)",
            "docstring": "Rendering *emphasis* text.    :param text: text content for emphasis."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "codespan(self, text)",
            "docstring": "Rendering inline `code` text.    :param text: text content for inline code."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "linebreak(self)",
            "docstring": "Rendering line break like ``<br>``."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "strikethrough(self, text)",
            "docstring": "Rendering ~~strikethrough~~ text.    :param text: text content for strikethrough."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "text(self, text)",
            "docstring": "Rendering unformatted text.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "escape(self, text)",
            "docstring": "Rendering escape sequence.    :param text: text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "autolink(self, link, is_email=False)",
            "docstring": "Rendering a given link or email address.    :param link: link content or email address.    :param is_email: whether this is an email or not."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "link(self, link, title, text)",
            "docstring": "Rendering a given link with content and title.    :param link: href link for ``<a>`` tag.    :param title: title content for `title` attribute.    :param text: text content for description."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "image(self, src, title, text)",
            "docstring": "Rendering a image with title and text.    :param src: source link of the image.    :param title: title text of the image.    :param text: alt text of the image."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "inline_html(self, html)",
            "docstring": "Rendering span level pure html content.    :param html: text content of the html snippet."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "newline(self)",
            "docstring": "Rendering newline element."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "footnote_ref(self, key, index)",
            "docstring": "Rendering the ref anchor of a footnote.    :param key: identity key for the footnote.    :param index: the index count of current footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "footnote_item(self, key, text)",
            "docstring": "Rendering a footnote item.    :param key: identity key for the footnote.    :param text: text content of the footnote."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "footnotes(self, text)",
            "docstring": "Wrapper for all footnotes.    :param text: contents of all footnotes."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "render(self, text)",
            "docstring": "Render the Markdown text.    :param text: markdown formatted text content."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/libraries/mistune.py",
            "function": "markdown(text, escape=True, **kwargs)",
            "docstring": "Render markdown formatted text to html.  :param text: markdown formatted text content.  :param escape: if set to False, all html tags will not be escaped.  :param use_xhtml: output with xhtml tags.  :param hard_wrap: if set to True, it will use the GFM line breaks feature.  :param parse_block_html: parse text only in block level html.  :param parse_inline_html: parse text only in inline level html."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/local_server.py",
            "function": "supports_color()",
            "docstring": "Returns True if the running system's terminal supports color, and False  otherwise."
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/lexer.py",
            "function": "_get_token()",
            "docstring": "Always starts at a non-space character"
        },
        {
            "filename": "/Users/harsh/Desktop/work/61a/lab and assignments/lab14/editor/lexer.py",
            "function": "_get_string()",
            "docstring": "Starts just after an opening quotation mark"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/gcloud_api.py",
            "function": "parse_gcloud_recognize_response(response)",
            "docstring": "Parse the Google Cloud Recognize Response into a dictionary"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/gcloud_api.py",
            "function": "get_gcloud_timestamps(response_dict)",
            "docstring": "Get the timestamps of words from a Google Cloud Recognize Response dictionary.    A timestamp is a 2D tuple of the start time and end time in milliseconds"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/analysis.py",
            "function": "process_file(path)",
            "docstring": "Calls the relevant functions once the file is uploaded by the user. Right now we are calling the emotion tagging  function  :param path: path to the audio file  :return: Nothing"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_normal()",
            "docstring": "Normal/combined usage."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_emojis()",
            "docstring": "Tokenizing emojis/emoticons/decorations."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_urls()",
            "docstring": "Tokenizing URLs."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_twitter()",
            "docstring": "Tokenizing hashtags, mentions and emails."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_phone_nums()",
            "docstring": "Tokenizing phone numbers."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_datetime()",
            "docstring": "Tokenizing dates and times."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_currencies()",
            "docstring": "Tokenizing currencies."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_num_sym()",
            "docstring": "Tokenizing combinations of numbers and symbols."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_punctuation()",
            "docstring": "Tokenizing punctuation and contractions."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_base(tests)",
            "docstring": "Base function for running tests."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_only_unicode_accepted()",
            "docstring": "Non-Unicode strings raise a ValueError."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_unicode_sentences_ignored_if_set()",
            "docstring": "Strings with Unicode characters tokenize to empty array if they're not allowed."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_check_ascii()",
            "docstring": "check_ascii recognises ASCII words properly."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_convert_unicode_word()",
            "docstring": "convert_unicode_word converts Unicode words correctly."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_convert_unicode_word_ignores_if_set()",
            "docstring": "convert_unicode_word ignores Unicode words if set."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_convert_unicode_chars()",
            "docstring": "convert_unicode_word correctly converts accented characters."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_calculate_batchsize_maxlen()",
            "docstring": "Batch size and max length are calculated properly."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_freeze_layers()",
            "docstring": "Correct layers are frozen."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_change_trainable()",
            "docstring": "change_trainable() changes trainability of layers."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_deepmoji_transfer_extend_embedding()",
            "docstring": "Defining deepmoji with extension."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_relabel()",
            "docstring": "relabel() works with multi-class labels."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_relabel_binary()",
            "docstring": "relabel() works with binary classification (no changes to labels)"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_finetune_full()",
            "docstring": "finetuning using 'full'."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_finetune_last()",
            "docstring": "finetuning using 'last'."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_score_emoji()",
            "docstring": "Emoji predictions make sense."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_encode_texts()",
            "docstring": "Text encoding is stable."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_dataset_split_parameter()",
            "docstring": "Dataset is split in the desired ratios"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_dataset_split_explicit()",
            "docstring": "Dataset is split according to given indices"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_id_to_sentence()",
            "docstring": "Tokenizing and converting back preserves the input."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_id_to_sentence_with_unknown()",
            "docstring": "Tokenizing and converting back preserves the input, except for unknowns."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/sentence_tokenizer.py",
            "function": "tokenize_sentences(self, sentences, reset_stats=True, max_sentences=None)",
            "docstring": "Converts a given list of sentences into a numpy array according to      its vocabulary.    # Arguments:      sentences: List of sentences to be tokenized.      reset_stats: Whether the word generator's stats should be reset.      max_sentences: Maximum length of sentences. Must be set if the        length cannot be inferred from the input.    # Returns:      Numpy array of the tokenization sentences with masking,      infos,      stats    # Raises:      ValueError: When maximum length is not set and cannot be inferred."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/sentence_tokenizer.py",
            "function": "to_sentence(self, sentence_idx)",
            "docstring": "Converts a tokenized sentence back to a list of words.    # Arguments:      sentence_idx: List of numbers, representing a tokenized sentence        given the current vocabulary.    # Returns:      String created by converting all numbers back to words and joined      together with spaces."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/sentence_tokenizer.py",
            "function": "coverage(dataset, verbose=False)",
            "docstring": "Computes the percentage of words in a given dataset that are unknown.  # Arguments:    dataset: Tokenized dataset to be checked.    verbose: Verbosity flag.  # Returns:    Percentage of unknown tokens."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "mostly_english(words, english, pct_eng_short=0.5, pct_eng_long=0.6, ignore_special_tokens=True, min_length=2)",
            "docstring": "Ensure text meets threshold for containing English words"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "correct_length(words, min_words, max_words, ignore_special_tokens=True)",
            "docstring": "Ensure text meets threshold for containing English words    and that it's within the min and max words limits."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "remove_variation_selectors(text)",
            "docstring": "Remove styling glyph variants for Unicode characters.    For instance, remove skin color from emojis."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "shorten_word(word)",
            "docstring": "Shorten groupings of 3+ identical consecutive chars to 2, e.g. '!!!!' --> '!!'"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "process_word(word)",
            "docstring": "Shortening and converting the word to a special token if relevant."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/model_def.py",
            "function": "deepmoji_feature_encoding(maxlen, weight_path, return_attention=False)",
            "docstring": "Loads the pretrained DeepMoji model for extracting features    from the penultimate feature layer. In this way, it transforms    the text into its emotional encoding.  # Arguments:    maxlen: Maximum length of a sentence (given in tokens).    weight_path: Path to model weights to be loaded.    return_attention: If true, output will be weight of each input token      used for the prediction  # Returns:    Pretrained model for encoding text into feature vectors."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/model_def.py",
            "function": "deepmoji_emojis(maxlen, weight_path, return_attention=False)",
            "docstring": "Loads the pretrained DeepMoji model for extracting features    from the penultimate feature layer. In this way, it transforms    the text into its emotional encoding.  # Arguments:    maxlen: Maximum length of a sentence (given in tokens).    weight_path: Path to model weights to be loaded.    return_attention: If true, output will be weight of each input token      used for the prediction  # Returns:    Pretrained model for encoding text into feature vectors."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/model_def.py",
            "function": "deepmoji_architecture(nb_classes, nb_tokens, maxlen, feature_output=False, embed_dropout_rate=0, final_dropout_rate=0, embed_l2=1E-6, return_attention=False)",
            "docstring": "Returns the DeepMoji architecture uninitialized and  without using the pretrained model weights.  # Arguments:    nb_classes: Number of classes in the dataset.    nb_tokens: Number of tokens in the dataset (i.e. vocabulary size).    maxlen: Maximum length of a token.    feature_output: If True the model returns the penultimate            feature vector rather than Softmax probabilities            (defaults to False).    embed_dropout_rate: Dropout rate for the embedding layer.    final_dropout_rate: Dropout rate for the final Softmax layer.    embed_l2: L2 regularization for the embedding layerl.  # Returns:    Model with the given parameters."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/model_def.py",
            "function": "load_specific_weights(model, weight_path, exclude_names=[], extend_embedding=0, verbose=True)",
            "docstring": "Loads model weights from the given file path, excluding any    given layers.  # Arguments:    model: Model whose weights should be loaded.    weight_path: Path to file containing model weights.    exclude_names: List of layer names whose weights should not be loaded.    extend_embedding: Number of new words being added to vocabulary.    verbose: Verbosity flag.  # Raises:    ValueError if the file at weight_path does not exist."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/model_def.py",
            "function": "append_to_embedding(pretrain_weights, random_init_weights)",
            "docstring": "Uses pretrained weights for the tokens already in the vocabulary.    Remaining weights will be left with the random initialization."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/model_def.py",
            "function": "get_weights_from_hdf5(filepath)",
            "docstring": "Loads the weights from a saved Keras model into numpy arrays.    The weights are saved using Keras 2.0 so we don't need all the    conversion functionality for handling old weights."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "count_words_in_sentence(self, words)",
            "docstring": "Generates word counts for all tokens in the given sentence.    # Arguments:      words: Tokenized sentence whose words should be counted."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "save_vocab(self, path=None)",
            "docstring": "Saves the vocabulary into a file.    # Arguments:      path: Where the vocabulary should be saved. If not specified, a         randomly generated filename is used instead."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "get_next_word(self)",
            "docstring": "Returns next tokenized sentence from the word geneerator.    # Returns:      List of strings, representing the next tokenized sentence."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "count_all_words(self)",
            "docstring": "Generates word counts for all words in all sentences of the word      generator."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "populate_master_vocab(self, vocab_path, min_words=1, force_appearance=None)",
            "docstring": "Populates the master vocabulary using all vocabularies found in the      given path. Vocabularies should be named *.npz. Expects the      vocabularies to be numpy arrays with counts. Normalizes the counts      and combines them.    # Arguments:      vocab_path: Path containing vocabularies to be combined.      min_words: Minimum amount of occurences a word must have in order        to be included in the master vocabulary.      force_appearance: Optional vocabulary filename that will be added        to the master vocabulary no matter what. This vocabulary must        be present in vocab_path."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "save_vocab(self, path_count, path_vocab, word_limit=100000)",
            "docstring": "Saves the master vocabulary into a file."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "all_words_in_sentences(sentences)",
            "docstring": "Extracts all unique words from a given list of sentences.  # Arguments:    sentences: List or word generator of sentences to be processed.  # Returns:    List of all unique words contained in the given sentences."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "extend_vocab_in_file(vocab, max_tokens=10000, vocab_path=VOCAB_PATH)",
            "docstring": "Extends JSON-formatted vocabulary with words from vocab that are not    present in the current vocabulary. Adds up to max_tokens words.    Overwrites file in vocab_path.  # Arguments:    new_vocab: Vocabulary to be added. MUST have word_counts populated, i.e.      must have run count_all_words() previously.    max_tokens: Maximum number of words to be added.    vocab_path: Path to the vocabulary json which is to be extended."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "extend_vocab(current_vocab, new_vocab, max_tokens=10000)",
            "docstring": "Extends current vocabulary with words from vocab that are not    present in the current vocabulary. Adds up to max_tokens words.  # Arguments:    current_vocab: Current dictionary of tokens.    new_vocab: Vocabulary to be added. MUST have word_counts populated, i.e.      must have run count_all_words() previously.    max_tokens: Maximum number of words to be added.  # Returns:    How many new tokens have been added."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "load_benchmark(path, vocab, extend_with=0)",
            "docstring": "Loads the given benchmark dataset.    Tokenizes the texts using the provided vocabulary, extending it with    words from the training dataset if extend_with > 0. Splits them into    three lists: training, validation and testing (in that order).    Also calculates the maximum length of the texts and the    suggested batch_size.  # Arguments:    path: Path to the dataset to be loaded.    vocab: Vocabulary to be used for tokenizing texts.    extend_with: If > 0, the vocabulary will be extended with up to      extend_with tokens from the training set before tokenizing.  # Returns:    A dictionary with the following fields:      texts: List of three lists, containing tokenized inputs for        training, validation and testing (in that order).      labels: List of three lists, containing labels for training,        validation and testing (in that order).      added: Number of tokens added to the vocabulary.      batch_size: Batch size.      maxlen: Maximum length of an input."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "calculate_batchsize_maxlen(texts)",
            "docstring": "Calculates the maximum length in the provided texts and a suitable    batch size. Rounds up maxlen to the nearest multiple of ten.  # Arguments:    texts: List of inputs.  # Returns:    Batch size,    max length"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "finetuning_callbacks(checkpoint_path, patience, verbose)",
            "docstring": "Callbacks for model training.  # Arguments:    checkpoint_path: Where weight checkpoints should be saved.    patience: Number of epochs with no improvement after which      training will be stopped.  # Returns:    Array with training callbacks that can be passed straight into    model.fit() or similar."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "freeze_layers(model, unfrozen_types=[], unfrozen_keyword=None)",
            "docstring": "Freezes all layers in the given model, except for ones that are    explicitly specified to not be frozen.  # Arguments:    model: Model whose layers should be modified.    unfrozen_types: List of layer types which shouldn't be frozen.    unfrozen_keyword: Name keywords of layers that shouldn't be frozen.  # Returns:    Model with the selected layers frozen."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "change_trainable(layer, trainable, verbose=False)",
            "docstring": "Helper method that fixes some of Keras' issues with wrappers and    trainability. Freezes or unfreezes a given layer.  # Arguments:    layer: Layer to be modified.    trainable: Whether the layer should be frozen or unfrozen.    verbose: Verbosity flag."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "relabel(y, current_label_nr, nb_classes)",
            "docstring": "Makes a binary classification for a specific class in a    multi-class dataset.  # Arguments:    y: Outputs to be relabelled.    current_label_nr: Current label number.    nb_classes: Total number of classes.  # Returns:    Relabelled outputs of a given multi-class dataset into a binary    classification dataset."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "evaluate_using_acc(model, X_test, y_test, batch_size)",
            "docstring": "Evaluation function using accuracy.  # Arguments:    model: Model to be evaluated.    X_test: Inputs of the testing set.    y_test: Outputs of the testing set.    batch_size: Batch size.  # Returns:    Accuracy of the given model."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/tokenizer.py",
            "function": "RE_EMOJI = ur\"\"\"\\ud83c[\\udf00-\\udfff]|\\ud83d[\\udc00-\\ude4f\\ude80-\\uf]|[\\u2600-\\u26FF\\u2700-\\u27BF]\"\"\"",
            "docstring": "RE_EMOJI = ur\\ud83c[\\udf00-\\udfff]|\\ud83d[\\udc00-\\ude4f\\ude80-\\udeff]|[\\u2600-\\u26FF\\u2700-\\u27BF]"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "get_words(self, sentence)",
            "docstring": "Tokenizes a sentence into individual words.      Converts Unicode punctuation into ASCII if that option is set.      Ignores sentences with Unicode if that option is set.      Returns an empty list of words if the sentence has Unicode and      that is not allowed."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "check_ascii(self, word)",
            "docstring": "Returns whether a word is ASCII"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "convert_unicode_word(self, word)",
            "docstring": "Converts Unicode words to ASCII using unidecode. If Unicode is not      allowed (set as a variable during initialization), then only      punctuation that can be converted to ASCII will be allowed."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "data_preprocess_filtering(self, line, iter_i)",
            "docstring": "To be overridden with specific preprocessing/filtering behavior      if desired.      Returns a boolean of whether the line should be accepted and the      preprocessed text.      Runs prior to tokenization."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "data_postprocess_filtering(self, words, iter_i)",
            "docstring": "To be overridden with specific postprocessing/filtering behavior      if desired.      Returns a boolean of whether the line should be accepted and the      postprocessed text.      Runs after tokenization."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "extract_valid_sentence_words(self, line)",
            "docstring": "Line may either a string of a list of strings depending on how      the stream is being parsed.      Domain-specific processing and filtering can be done both prior to      and after tokenization.      Custom information about the line can be extracted during the      processing phases and returned as a dict."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/DeepMoji-master/deepmoji/class_avg_finetuning.py",
            "function": "relabel(y, current_label_nr, nb_classes)",
            "docstring": "Makes a binary classification for a specific class in a    multi-class dataset.  # Arguments:    y: Outputs to be relabelled.    current_label_nr: Current label number.    nb_classes: Total number of classes.  # Returns:    Relabelled outputs of a given multi-class dataset into a binary    classification dataset."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/app.py",
            "function": "index()",
            "docstring": "This the the landing page. It includes an upload and submit button  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/app.py",
            "function": "emptydir()",
            "docstring": ":return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/api/python2.7/bin/smtpd2.7.py",
            "function": "process_message(self, peer, mailfrom, rcpttos, data)",
            "docstring": "Override this abstract method to handle messages from the client.    peer is a tuple containing (ipaddr, port) of the client that made the    socket connection to our smtp port.    mailfrom is the raw address the client claims the message is coming    from.    rcpttos is a list of raw addresses the client wishes to deliver the    message to.    data is a string containing the entire full text of the message,    headers (if supplied) and all. It has been `de-transparencied'    according to RFC 821, Section 4.5.2. In other words, a line    containing a `.' followed by other text has had the leading dot    removed.    This function should return None, for a normal `250 Ok' response;    otherwise it returns the desired response string in RFC 821 format."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/api/python2.7/bin/smtpd2.py",
            "function": "process_message(self, peer, mailfrom, rcpttos, data)",
            "docstring": "Override this abstract method to handle messages from the client.    peer is a tuple containing (ipaddr, port) of the client that made the    socket connection to our smtp port.    mailfrom is the raw address the client claims the message is coming    from.    rcpttos is a list of raw addresses the client wishes to deliver the    message to.    data is a string containing the entire full text of the message,    headers (if supplied) and all. It has been `de-transparencied'    according to RFC 821, Section 4.5.2. In other words, a line    containing a `.' followed by other text has had the leading dot    removed.    This function should return None, for a normal `250 Ok' response;    otherwise it returns the desired response string in RFC 821 format."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/sentiment_website/api/python2.7/bin/smtpd.py",
            "function": "process_message(self, peer, mailfrom, rcpttos, data)",
            "docstring": "Override this abstract method to handle messages from the client.    peer is a tuple containing (ipaddr, port) of the client that made the    socket connection to our smtp port.    mailfrom is the raw address the client claims the message is coming    from.    rcpttos is a list of raw addresses the client wishes to deliver the    message to.    data is a string containing the entire full text of the message,    headers (if supplied) and all. It has been `de-transparencied'    according to RFC 821, Section 4.5.2. In other words, a line    containing a `.' followed by other text has had the leading dot    removed.    This function should return None, for a normal `250 Ok' response;    otherwise it returns the desired response string in RFC 821 format."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/jpm-extraction-portal/app.py",
            "function": "getLastCAT1(pathToFile, indexOfPageNumber)",
            "docstring": "Getting the last category from the csv that is stored locally.  :param pathToFile:  :param indexOfPageNumber:  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/kc/bs_table_extractor.py",
            "function": "_check_validity(self, i, j, height, width)",
            "docstring": "check if a rectangle (i, j, height, width) can be put into self.output"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/kc/bs_table_extractor.py",
            "function": "_check_cell_validity(self, i, j)",
            "docstring": "check if a cell (i, j) can be put into self._output"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/kc/req.py",
            "function": "save_pickle(object, file)",
            "docstring": "A function to save object to a pickle in the file location  :param object: what you want to pickle  :param file: where you want to pickle  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/kc/req.py",
            "function": "get_pickle(file)",
            "docstring": "Return the pickle object from the file location  :param file: the place where the pickle is stored  :return: the pickled object"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/kc/req.py",
            "function": "extract_table(inner_html)",
            "docstring": "This function uses the bs_table_extractor library and uses that to extract the table from the pop up.  The return type of extractor.parse() is an Extractor object  The return type of .return_list() is a list  :param inner_html: inner HTML code for the popup  :return: table_extracted of type list of lists"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/kc/req.py",
            "function": "query(r)",
            "docstring": "This function converts the extracted table from list to a Dataframe  :param r: response from the GET request  :return: Dataframe from the list of list"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-project/analysis.py",
            "function": "process_file(path)",
            "docstring": "Calls the relevant functions once the file is uploaded by the user. Right now we are calling the emotion tagging  function  :param path: path to the audio file  :return: Nothing"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-project/app.py",
            "function": "index()",
            "docstring": "This the the landing page. It includes an upload and submit button  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-project/app.py",
            "function": "emptydir()",
            "docstring": ":return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/sitime2.py",
            "function": "extend_line(stepping, vec1, vec2, line)",
            "docstring": "Returns the subplots, extended  :param stepping: linspace  :param vec1: x value  :param vec2: y value  :param line: the line itself  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/sitime2.py",
            "function": "plot_sin(steps int, interval int)",
            "docstring": "Plots the sin curve with interval/speed  :param steps: steps for linspace  :param interval: speed to plot in miliseconds  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/primenumbers_internship.py",
            "function": "is_part_of_series(arr)",
            "docstring": "Method to find all the integers from arr that follow f(0) = 0 f(1) = 1 f(n) = 2*f(n-1) - 2*f(n-2)  for all n > 1  :param arr: list of integers  :return: list of integers of above series from arr"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/solution_file.py",
            "function": "two_sum(nums, target int)",
            "docstring": "Return a list with the index of first two numbers from the nums  parameter that add up to the target.  :param nums: a List with all the numbers  :param target: the Target is the number to which we want to sum the two numbers  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/solution_file.py",
            "function": "check_palindrome(x int)",
            "docstring": "Return true is the number x is a palindrome, otherwise return a False  :param x: a positive integer  :return: Boolean"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/solution_file.py",
            "function": "nested_list_weight_sum(A list, weight=1)",
            "docstring": "returning the nested sum  :param A:  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/balloons.py",
            "function": "max_number_of_balloons(text str) -> int",
            "docstring": ">>> max_number_of_balloons('nlaebolko')  1  >>> max_number_of_balloons('loonbalxballpoon')  2  :param text: input from where we want to calculate balloons  :return: the number of balloons"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/sitime.py",
            "function": "normalize(period int, data pd.Series)",
            "docstring": "Function to average out the data along PERIOD period.  :param period: The period within the X Axis  :param data: pandas Series  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/leetcodes/sitime.py",
            "function": "diff_data()",
            "docstring": "Cleans the dataset from data.csv  :return: dataset pandas series"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/search-tool/indexing_files.py",
            "function": "search_elastic(es Elasticsearch, index str, body dict)",
            "docstring": "to search in an elasticsearch database, we need to pass the query in a specific format  It has to contain a json and the index string  :param body: the json  :param index: the string name  :param es: the main Elasticsearch instance  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/Weather_Derivatives/migrations/env.py",
            "function": "run_migrations_offline()",
            "docstring": "Run migrations in 'offline' mode.  This configures the context with just a URL  and not an Engine, though an Engine is acceptable  here as well. By skipping the Engine creation  we don't even need a DBAPI to be available.  Calls to context.execute() here emit the given string to the  script output."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/Weather_Derivatives/migrations/env.py",
            "function": "run_migrations_online()",
            "docstring": "Run migrations in 'online' mode.  In this scenario we need to create an Engine  and associate a connection with the context."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/code-search/search/index_files_parser.py",
            "function": "parse_code(file_path str)",
            "docstring": "Function to extract docstring and function string by tokenizing  :param file_path: python file that has to be tokenized  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/code-search/search/index_files_parser.py",
            "function": "parse_test(file_path str)",
            "docstring": "function just for testing using dataframe   :param file_path: the filename and filepath  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/code-search/search/index_files.py",
            "function": "save_to_json(json_data dict, json_filename str)",
            "docstring": "This is a function to save a dict or json to a .json file  :param json_data: the Python dictionary or json data  :param json_filename: json file to which you want to save this  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/code-search/search/index_files.py",
            "function": "search(root, indent=0, flags=None, extension='py')",
            "docstring": "Recursive function to index all the files in the root directory. Appends are the filepaths to list data_all  :param root: starting directory  :param indent: for printing in console  :param flags: words to ignore in the path while indexing  :param extension: file extension to index  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/ma_scrape.py",
            "function": "get_datetime()",
            "docstring": "Function to return current datetime in format MM/DD/YYYY HH:MM  :return: the string of current datetime"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/ma_scrape.py",
            "function": "convert_cents_to_dollars(x)",
            "docstring": ":param x: the string value in cents  :return: a float value in dollars"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/ma_scrape.py",
            "function": "format_csv()",
            "docstring": "Extracts the useful information from the downloaded csv from the ma_downloads folder in the root directory  and formats it  :return: formatted csv is saved to the ma_csv folder, creates a zip code level csv in the root dir too"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/ma_scrape.py",
            "function": "new_main_scrape(zipcode)",
            "docstring": "This function just goes to the url for the specific zipcode and then clicks on the download button.  The downloaded file is then edited -- renamed and saved to a specific folder  :param zipcode: the specific zipcode for MA  :return: nothing"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "timeit(method)",
            "docstring": "Decorator function to time other function  :param method:  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "df_is_equal(df1, df2)",
            "docstring": "This is a function that uses pandas.testing to check if two dataframes are equals  :param df1: first dataframe  :param df2: second dataframe  :return: bool"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "check_unique()",
            "docstring": "Returns a tuple with the original merged zipcode supplier companies and the number of unique suppliers  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "convert_cents_to_dollars(x)",
            "docstring": ":param x: the string value in cents  :return: a float value in dollars"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "get_distribution_companies(zipcode)",
            "docstring": "This function will get all TDU companies for that particular zipcode -- as part of the response  zipcode: zipcode for MA  :return: json response"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "update_tracking(zipcode str, is_new_entry bool, timestamp str, filename str)",
            "docstring": "This function updates the tracking for each zipcode  :param zipcode: zipcode  :param is_new_entry: if there was any changes  :param timestamp: timestamp to put in  :param filename: file name to put in  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "get_suppliers(zipcode)",
            "docstring": "This function loops through each of the companies returned from the get_distribution_companies  and gets the supplier's list for each of them  :param zipcode: zipcode  :return: A csv file is saved, returns a Bool value if the zipcode scrape was successful or not"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/req_method.py",
            "function": "scrape()",
            "docstring": "This is the main function to scrape the results  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/scrape.py",
            "function": "today_date()",
            "docstring": "Return the current date in the format Date (MM/DD/YY)  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/scrape.py",
            "function": "sleep_one()",
            "docstring": "Calls the time.sleep function for 1 second. The program run time pauses for 1 sec  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/scrape.py",
            "function": "extract_table(inner_html)",
            "docstring": "This function uses the bs_table_extractor library and uses that to extract the table from the pop up.  :param inner_html: inner HTML code for the popup  :return: table_extracted of type list of lists"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/ma/scrape.py",
            "function": "scrape_website(source_url, zipcode)",
            "docstring": "This is the main function, head for the scraping module that we will write for the New York  website scrape  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "isPDFFile(fileName)",
            "docstring": "checks whether fileName is a pdf file    fileName is a PDF file, if the extension is .pdf"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "ocr(pdfPath)",
            "docstring": "Perform OCR on a PDF given by pdfPath    This function is called from getPDFasText function    returns: the text resulted from running OCR on the pdf"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "getPDFasText(path, ocrEnabled=True)",
            "docstring": "path: must be in the format parentFolder + fileName + extension    example of valid paths:      1) PDFs/AMBIT ENERGY.pdf      2) PDFs/Energy to Go.pdf    returns: The text representation of the given PDF file    It reads the PDF file using PyPDF2 library and gets the PDF file as a string    If PyPDF2 fails, then it performs OCR on the pdf"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "getTerminationFee(txt, fee)",
            "docstring": "extract a termination fee from the PDF    returns: the extracted termination fee from the PDF"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "getAdditionalFees(txt)",
            "docstring": "Search for additional fees from the text of the PDF    returns: extracted add-on fees from the PDF"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "getRenewalType(txt)",
            "docstring": "Get the renewal details from the text of the PDF    returns: the renewal details found from the PDF"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "getMinimumUsageFees(txt)",
            "docstring": "Uses a regular expression that matches a single sentence containing minimum usage fee    The regex starts matching beginning at the beginning of the sentence until the end of it"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "getBEDCharges(txt)",
            "docstring": "Extract the Base, Energy, Delivery Charges from txt    returns: baseFee, energyFee, deliveryFee"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/pdfReader.py",
            "function": "extractNumber(arr, start)",
            "docstring": "Uses a regex to extract a number from a value in arr"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/csv_generate.py",
            "function": "generateCSVTemplate(fileNameWithExtension, mode)",
            "docstring": "this function writes"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/csv_generate.py",
            "function": "writeToCSV(csv, data, fact_sheet_paths)",
            "docstring": "given a JSON object containing the data,    write the data to the csv file"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "getCurrentDate()",
            "docstring": ">>> getCurrentDate()    9/22/2019"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "getResponseText(zip_code)",
            "docstring": "Send an API request to PowerToChoose and return the response    Input: 1) the zip code of the city"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "getJSON(zip_code)",
            "docstring": "return a JSON object containing data from the given zip code"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "getEmbeddedPDFLink(url)",
            "docstring": "if there's any embedded links to PDFs, get it    returns: if there's a PDF in 'url', returns that         if not, return the input 'url'    purpose: some companies had PDFs embedded on their pages, so when I downloaded it, it was failing"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "isFileExists(folder_name, file_name_with_extension)",
            "docstring": "returns: true if file given by the parameters exists, false otherwise"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "getUniquePath(folder_name, preferred_file_name)",
            "docstring": "initial is the name of the file without the extension"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "downloadPDF(link, preferred_file_name, folderName)",
            "docstring": "given an url to a pdf file on a webpage,    download the pdf file locally"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "redownloadPDF(downloadedPath, link=\"\")",
            "docstring": "Call this function if you redownload the PDF given by downloadedPath    downloadedPath: the path (not the URL), such as \"PDFs/Power Next.pdf\""
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/PowerToChoose/scrapeHelper.py",
            "function": "downloadUsingPDFKit(link, path)",
            "docstring": "There was no reason to use selenium to download pdfs, instead I found this library called pdfkit    pdfkit will convert HTML pages to PDFs, some webpages they have HTML files instead of PDFs,    so pdfkit fixes the problem of converting those HTML pages to PDFs and downloading them    pdfkit depends on wkhtmltopdf    to install pdfkit: run \"pip install pdfkit\"    to install wkhtmltopdf: go to \"https://wkhtmltopdf.org/downloads.html\""
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/bs_table_extractor.py",
            "function": "_check_validity(self, i, j, height, width)",
            "docstring": "check if a rectangle (i, j, height, width) can be put into self.output"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/bs_table_extractor.py",
            "function": "_check_cell_validity(self, i, j)",
            "docstring": "check if a cell (i, j) can be put into self._output"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "isPDFFile(fileName)",
            "docstring": "checks whether fileName is a pdf file    fileName is a PDF file, if the extension is .pdf"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "ocr(pdfPath)",
            "docstring": "Perform OCR on a PDF given by pdfPath    This function is called from getPDFasText function    returns: the text resulted from running OCR on the pdf"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "getPDFasText(path, ocrEnabled=True)",
            "docstring": "path: must be in the format parentFolder + fileName + extension    example of valid paths:      1) PDFs/AMBIT ENERGY.pdf      2) PDFs/Energy to Go.pdf    returns: The text representation of the given PDF file    It reads the PDF file using PyPDF2 library and gets the PDF file as a string    If PyPDF2 fails, then it performs OCR on the pdf"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "getTerminationFee(txt, fee)",
            "docstring": "extract a termination fee from the PDF    returns: the extracted termination fee from the PDF"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "getAdditionalFees(txt)",
            "docstring": "Search for additional fees from the text of the PDF    returns: extracted add-on fees from the PDF"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "getRenewalType(txt)",
            "docstring": "Get the renewal details from the text of the PDF    returns: the renewal details found from the PDF"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "getMinimumUsageFees(txt)",
            "docstring": "Uses a regular expression that matches a single sentence containing minimum usage fee    The regex starts matching beginning at the beginning of the sentence until the end of it"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "getBEDCharges(txt)",
            "docstring": "Extract the Base, Energy, Delivery Charges from txt    returns: baseFee, energyFee, deliveryFee"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdfReader.py",
            "function": "extractNumber(arr, start)",
            "docstring": "Uses a regex to extract a number from a value in arr"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdf.py",
            "function": "exists(id_key)",
            "docstring": "Checks if the pdf has already been downloaded  :return: boolean"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/pdf.py",
            "function": "download_pdf(pdf_url, plan)",
            "docstring": "Function to download pdf from the URL supplied  Recursion included.  :return: Saves the pdf in the PDF folder in the texas folder"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/main.py",
            "function": "api_data(self, zipcode)",
            "docstring": "Gets data and parses it as per PowerToChoose module specifications    :param zipcode: zipcode of the place    :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/main.py",
            "function": "all_zips(self)",
            "docstring": "creates API object for all the zipcodes    :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/main.py",
            "function": "__init__(self, row_data)",
            "docstring": "Constructor for the class for the Plan    :param row_data: type Python dictionary"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/main.py",
            "function": "parse_csv(filepath)",
            "docstring": "Parsing the exported csv from PowerToChoose website  :param filepath: the location of the CSV file to parse  :return: void"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/main.py",
            "function": "map_zipcode()",
            "docstring": "This function will be mapping zipcodes to idKey (plan_id in dict)  So key = idKey, value = list(zipcodes with that plan)  for each of the plans in the input CSV -  :return: the mapping"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "getCurrentDate()",
            "docstring": ">>> getCurrentDate()    9/22/2019"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "getResponseText(zip_code)",
            "docstring": "Send an API request to PowerToChoose and return the response    Input: 1) the zip code of the city"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "getJSON(zip_code)",
            "docstring": "return a JSON object containing data from the given zip code"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "getEmbeddedPDFLink(url)",
            "docstring": "if there's any embedded links to PDFs, get it    returns: if there's a PDF in 'url', returns that         if not, return the input 'url'    purpose: some companies had PDFs embedded on their pages, so when I downloaded it, it was failing"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "isFileExists(folder_name, file_name_with_extension)",
            "docstring": "returns: true if file given by the parameters exists, false otherwise"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "getUniquePath(folder_name, preferred_file_name)",
            "docstring": "initial is the name of the file without the extension"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "downloadPDF(link, preferred_file_name, folderName)",
            "docstring": "given an url to a pdf file on a webpage,    download the pdf file locally"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "redownloadPDF(downloadedPath, link=\"\")",
            "docstring": "Call this function if you redownload the PDF given by downloadedPath    downloadedPath: the path (not the URL), such as \"PDFs/Power Next.pdf\""
        },
        {
            "filename": "/Users/harsh/Desktop/coding/urap-scrape/texas/scrapeHelper.py",
            "function": "downloadUsingPDFKit(link, path)",
            "docstring": "There was no reason to use selenium to download pdfs, instead I found this library called pdfkit    pdfkit will convert HTML pages to PDFs, some webpages they have HTML files instead of PDFs,    so pdfkit fixes the problem of converting those HTML pages to PDFs and downloading them    pdfkit depends on wkhtmltopdf    to install pdfkit: run \"pip install pdfkit\"    to install wkhtmltopdf: go to \"https://wkhtmltopdf.org/downloads.html\""
        },
        {
            "filename": "/Users/harsh/Desktop/coding/pscrapex/scripts/ss.py",
            "function": "timing(f)",
            "docstring": "This is a function to time your functions  :param f:  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/imgur-scrape-test/imgur_scraper.py",
            "function": "get_viral_posts_from(start_date str, end_date str) -> json",
            "docstring": ":param start_date: date in string  :param end_date: date in string  :return: Imgur's viral content of the specified period in JSON Format"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/hacktech-app/migrations/env.py",
            "function": "run_migrations_offline()",
            "docstring": "Run migrations in 'offline' mode.  This configures the context with just a URL  and not an Engine, though an Engine is acceptable  here as well. By skipping the Engine creation  we don't even need a DBAPI to be available.  Calls to context.execute() here emit the given string to the  script output."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/hacktech-app/migrations/env.py",
            "function": "run_migrations_online()",
            "docstring": "Run migrations in 'online' mode.  In this scenario we need to create an Engine  and associate a connection with the context."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/hacktech-app/app/routes.py",
            "function": "api_()",
            "docstring": "API to convert UNIX Time to String Format. To be used from Solidity Files  Example Query: http://127.0.0.1:5000/api/convert?start=13&end=13  :return: [{\"data\": \"https://earthquake.usgs.gov/fdsnws/event/1/query?format=text&starttime=1970-01-01&endtime=1970-01-01&latitude=\"}]"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/hacktech-app/app/routes.py",
            "function": "risk_calculate(form)",
            "docstring": "TODO Anish Nuni  :param form:  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/expense-tracking/chase/statement_analysis.py",
            "function": "setup()",
            "docstring": "Opens the folder, checks for statment and returns dataframe  :return: dataframe for the csv"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/expense-tracking/chase/statement_analysis.py",
            "function": "analysis(df pd.DataFrame)",
            "docstring": "Analysis of the dataframe  :param df: Dataframe of the csv  :return: None"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/gcloud_api.py",
            "function": "parse_gcloud_recognize_response(response)",
            "docstring": "Parse the Google Cloud Recognize Response into a dictionary"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/gcloud_api.py",
            "function": "get_gcloud_timestamps(response_dict)",
            "docstring": "Get the timestamps of words from a Google Cloud Recognize Response dictionary.    A timestamp is a 2D tuple of the start time and end time in milliseconds"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/analysis.py",
            "function": "process_file(path)",
            "docstring": "Calls the relevant functions once the file is uploaded by the user. Right now we are calling the emotion tagging  function  :param path: path to the audio file  :return: Nothing"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_normal()",
            "docstring": "Normal/combined usage."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_emojis()",
            "docstring": "Tokenizing emojis/emoticons/decorations."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_urls()",
            "docstring": "Tokenizing URLs."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_twitter()",
            "docstring": "Tokenizing hashtags, mentions and emails."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_phone_nums()",
            "docstring": "Tokenizing phone numbers."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_datetime()",
            "docstring": "Tokenizing dates and times."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_currencies()",
            "docstring": "Tokenizing currencies."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_num_sym()",
            "docstring": "Tokenizing combinations of numbers and symbols."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_punctuation()",
            "docstring": "Tokenizing punctuation and contractions."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_tokenizer.py",
            "function": "test_base(tests)",
            "docstring": "Base function for running tests."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_only_unicode_accepted()",
            "docstring": "Non-Unicode strings raise a ValueError."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_unicode_sentences_ignored_if_set()",
            "docstring": "Strings with Unicode characters tokenize to empty array if they're not allowed."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_check_ascii()",
            "docstring": "check_ascii recognises ASCII words properly."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_convert_unicode_word()",
            "docstring": "convert_unicode_word converts Unicode words correctly."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_convert_unicode_word_ignores_if_set()",
            "docstring": "convert_unicode_word ignores Unicode words if set."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_word_generator.py",
            "function": "test_convert_unicode_chars()",
            "docstring": "convert_unicode_word correctly converts accented characters."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_calculate_batchsize_maxlen()",
            "docstring": "Batch size and max length are calculated properly."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_freeze_layers()",
            "docstring": "Correct layers are frozen."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_change_trainable()",
            "docstring": "change_trainable() changes trainability of layers."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_deepmoji_transfer_extend_embedding()",
            "docstring": "Defining deepmoji with extension."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_relabel()",
            "docstring": "relabel() works with multi-class labels."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_relabel_binary()",
            "docstring": "relabel() works with binary classification (no changes to labels)"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_finetune_full()",
            "docstring": "finetuning using 'full'."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_finetune_last()",
            "docstring": "finetuning using 'last'."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_score_emoji()",
            "docstring": "Emoji predictions make sense."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_finetuning.py",
            "function": "test_encode_texts()",
            "docstring": "Text encoding is stable."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_dataset_split_parameter()",
            "docstring": "Dataset is split in the desired ratios"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_dataset_split_explicit()",
            "docstring": "Dataset is split according to given indices"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_id_to_sentence()",
            "docstring": "Tokenizing and converting back preserves the input."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/tests/test_sentence_tokenizer.py",
            "function": "test_id_to_sentence_with_unknown()",
            "docstring": "Tokenizing and converting back preserves the input, except for unknowns."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/sentence_tokenizer.py",
            "function": "tokenize_sentences(self, sentences, reset_stats=True, max_sentences=None)",
            "docstring": "Converts a given list of sentences into a numpy array according to      its vocabulary.    # Arguments:      sentences: List of sentences to be tokenized.      reset_stats: Whether the word generator's stats should be reset.      max_sentences: Maximum length of sentences. Must be set if the        length cannot be inferred from the input.    # Returns:      Numpy array of the tokenization sentences with masking,      infos,      stats    # Raises:      ValueError: When maximum length is not set and cannot be inferred."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/sentence_tokenizer.py",
            "function": "to_sentence(self, sentence_idx)",
            "docstring": "Converts a tokenized sentence back to a list of words.    # Arguments:      sentence_idx: List of numbers, representing a tokenized sentence        given the current vocabulary.    # Returns:      String created by converting all numbers back to words and joined      together with spaces."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/sentence_tokenizer.py",
            "function": "coverage(dataset, verbose=False)",
            "docstring": "Computes the percentage of words in a given dataset that are unknown.  # Arguments:    dataset: Tokenized dataset to be checked.    verbose: Verbosity flag.  # Returns:    Percentage of unknown tokens."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "mostly_english(words, english, pct_eng_short=0.5, pct_eng_long=0.6, ignore_special_tokens=True, min_length=2)",
            "docstring": "Ensure text meets threshold for containing English words"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "correct_length(words, min_words, max_words, ignore_special_tokens=True)",
            "docstring": "Ensure text meets threshold for containing English words    and that it's within the min and max words limits."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "remove_variation_selectors(text)",
            "docstring": "Remove styling glyph variants for Unicode characters.    For instance, remove skin color from emojis."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "shorten_word(word)",
            "docstring": "Shorten groupings of 3+ identical consecutive chars to 2, e.g. '!!!!' --> '!!'"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/filter_utils.py",
            "function": "process_word(word)",
            "docstring": "Shortening and converting the word to a special token if relevant."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/model_def.py",
            "function": "deepmoji_feature_encoding(maxlen, weight_path, return_attention=False)",
            "docstring": "Loads the pretrained DeepMoji model for extracting features    from the penultimate feature layer. In this way, it transforms    the text into its emotional encoding.  # Arguments:    maxlen: Maximum length of a sentence (given in tokens).    weight_path: Path to model weights to be loaded.    return_attention: If true, output will be weight of each input token      used for the prediction  # Returns:    Pretrained model for encoding text into feature vectors."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/model_def.py",
            "function": "deepmoji_emojis(maxlen, weight_path, return_attention=False)",
            "docstring": "Loads the pretrained DeepMoji model for extracting features    from the penultimate feature layer. In this way, it transforms    the text into its emotional encoding.  # Arguments:    maxlen: Maximum length of a sentence (given in tokens).    weight_path: Path to model weights to be loaded.    return_attention: If true, output will be weight of each input token      used for the prediction  # Returns:    Pretrained model for encoding text into feature vectors."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/model_def.py",
            "function": "deepmoji_architecture(nb_classes, nb_tokens, maxlen, feature_output=False, embed_dropout_rate=0, final_dropout_rate=0, embed_l2=1E-6, return_attention=False)",
            "docstring": "Returns the DeepMoji architecture uninitialized and  without using the pretrained model weights.  # Arguments:    nb_classes: Number of classes in the dataset.    nb_tokens: Number of tokens in the dataset (i.e. vocabulary size).    maxlen: Maximum length of a token.    feature_output: If True the model returns the penultimate            feature vector rather than Softmax probabilities            (defaults to False).    embed_dropout_rate: Dropout rate for the embedding layer.    final_dropout_rate: Dropout rate for the final Softmax layer.    embed_l2: L2 regularization for the embedding layerl.  # Returns:    Model with the given parameters."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/model_def.py",
            "function": "load_specific_weights(model, weight_path, exclude_names=[], extend_embedding=0, verbose=True)",
            "docstring": "Loads model weights from the given file path, excluding any    given layers.  # Arguments:    model: Model whose weights should be loaded.    weight_path: Path to file containing model weights.    exclude_names: List of layer names whose weights should not be loaded.    extend_embedding: Number of new words being added to vocabulary.    verbose: Verbosity flag.  # Raises:    ValueError if the file at weight_path does not exist."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/model_def.py",
            "function": "append_to_embedding(pretrain_weights, random_init_weights)",
            "docstring": "Uses pretrained weights for the tokens already in the vocabulary.    Remaining weights will be left with the random initialization."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/model_def.py",
            "function": "get_weights_from_hdf5(filepath)",
            "docstring": "Loads the weights from a saved Keras model into numpy arrays.    The weights are saved using Keras 2.0 so we don't need all the    conversion functionality for handling old weights."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "count_words_in_sentence(self, words)",
            "docstring": "Generates word counts for all tokens in the given sentence.    # Arguments:      words: Tokenized sentence whose words should be counted."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "save_vocab(self, path=None)",
            "docstring": "Saves the vocabulary into a file.    # Arguments:      path: Where the vocabulary should be saved. If not specified, a         randomly generated filename is used instead."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "get_next_word(self)",
            "docstring": "Returns next tokenized sentence from the word geneerator.    # Returns:      List of strings, representing the next tokenized sentence."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "count_all_words(self)",
            "docstring": "Generates word counts for all words in all sentences of the word      generator."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "populate_master_vocab(self, vocab_path, min_words=1, force_appearance=None)",
            "docstring": "Populates the master vocabulary using all vocabularies found in the      given path. Vocabularies should be named *.npz. Expects the      vocabularies to be numpy arrays with counts. Normalizes the counts      and combines them.    # Arguments:      vocab_path: Path containing vocabularies to be combined.      min_words: Minimum amount of occurences a word must have in order        to be included in the master vocabulary.      force_appearance: Optional vocabulary filename that will be added        to the master vocabulary no matter what. This vocabulary must        be present in vocab_path."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "save_vocab(self, path_count, path_vocab, word_limit=100000)",
            "docstring": "Saves the master vocabulary into a file."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "all_words_in_sentences(sentences)",
            "docstring": "Extracts all unique words from a given list of sentences.  # Arguments:    sentences: List or word generator of sentences to be processed.  # Returns:    List of all unique words contained in the given sentences."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "extend_vocab_in_file(vocab, max_tokens=10000, vocab_path=VOCAB_PATH)",
            "docstring": "Extends JSON-formatted vocabulary with words from vocab that are not    present in the current vocabulary. Adds up to max_tokens words.    Overwrites file in vocab_path.  # Arguments:    new_vocab: Vocabulary to be added. MUST have word_counts populated, i.e.      must have run count_all_words() previously.    max_tokens: Maximum number of words to be added.    vocab_path: Path to the vocabulary json which is to be extended."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/create_vocab.py",
            "function": "extend_vocab(current_vocab, new_vocab, max_tokens=10000)",
            "docstring": "Extends current vocabulary with words from vocab that are not    present in the current vocabulary. Adds up to max_tokens words.  # Arguments:    current_vocab: Current dictionary of tokens.    new_vocab: Vocabulary to be added. MUST have word_counts populated, i.e.      must have run count_all_words() previously.    max_tokens: Maximum number of words to be added.  # Returns:    How many new tokens have been added."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "load_benchmark(path, vocab, extend_with=0)",
            "docstring": "Loads the given benchmark dataset.    Tokenizes the texts using the provided vocabulary, extending it with    words from the training dataset if extend_with > 0. Splits them into    three lists: training, validation and testing (in that order).    Also calculates the maximum length of the texts and the    suggested batch_size.  # Arguments:    path: Path to the dataset to be loaded.    vocab: Vocabulary to be used for tokenizing texts.    extend_with: If > 0, the vocabulary will be extended with up to      extend_with tokens from the training set before tokenizing.  # Returns:    A dictionary with the following fields:      texts: List of three lists, containing tokenized inputs for        training, validation and testing (in that order).      labels: List of three lists, containing labels for training,        validation and testing (in that order).      added: Number of tokens added to the vocabulary.      batch_size: Batch size.      maxlen: Maximum length of an input."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "calculate_batchsize_maxlen(texts)",
            "docstring": "Calculates the maximum length in the provided texts and a suitable    batch size. Rounds up maxlen to the nearest multiple of ten.  # Arguments:    texts: List of inputs.  # Returns:    Batch size,    max length"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "finetuning_callbacks(checkpoint_path, patience, verbose)",
            "docstring": "Callbacks for model training.  # Arguments:    checkpoint_path: Where weight checkpoints should be saved.    patience: Number of epochs with no improvement after which      training will be stopped.  # Returns:    Array with training callbacks that can be passed straight into    model.fit() or similar."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "freeze_layers(model, unfrozen_types=[], unfrozen_keyword=None)",
            "docstring": "Freezes all layers in the given model, except for ones that are    explicitly specified to not be frozen.  # Arguments:    model: Model whose layers should be modified.    unfrozen_types: List of layer types which shouldn't be frozen.    unfrozen_keyword: Name keywords of layers that shouldn't be frozen.  # Returns:    Model with the selected layers frozen."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "change_trainable(layer, trainable, verbose=False)",
            "docstring": "Helper method that fixes some of Keras' issues with wrappers and    trainability. Freezes or unfreezes a given layer.  # Arguments:    layer: Layer to be modified.    trainable: Whether the layer should be frozen or unfrozen.    verbose: Verbosity flag."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "relabel(y, current_label_nr, nb_classes)",
            "docstring": "Makes a binary classification for a specific class in a    multi-class dataset.  # Arguments:    y: Outputs to be relabelled.    current_label_nr: Current label number.    nb_classes: Total number of classes.  # Returns:    Relabelled outputs of a given multi-class dataset into a binary    classification dataset."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/finetuning.py",
            "function": "evaluate_using_acc(model, X_test, y_test, batch_size)",
            "docstring": "Evaluation function using accuracy.  # Arguments:    model: Model to be evaluated.    X_test: Inputs of the testing set.    y_test: Outputs of the testing set.    batch_size: Batch size.  # Returns:    Accuracy of the given model."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/tokenizer.py",
            "function": "RE_EMOJI = ur\"\"\"\\ud83c[\\udf00-\\udfff]|\\ud83d[\\udc00-\\ude4f\\ude80-\\uf]|[\\u2600-\\u26FF\\u2700-\\u27BF]\"\"\"",
            "docstring": "RE_EMOJI = ur\\ud83c[\\udf00-\\udfff]|\\ud83d[\\udc00-\\ude4f\\ude80-\\udeff]|[\\u2600-\\u26FF\\u2700-\\u27BF]"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "get_words(self, sentence)",
            "docstring": "Tokenizes a sentence into individual words.      Converts Unicode punctuation into ASCII if that option is set.      Ignores sentences with Unicode if that option is set.      Returns an empty list of words if the sentence has Unicode and      that is not allowed."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "check_ascii(self, word)",
            "docstring": "Returns whether a word is ASCII"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "convert_unicode_word(self, word)",
            "docstring": "Converts Unicode words to ASCII using unidecode. If Unicode is not      allowed (set as a variable during initialization), then only      punctuation that can be converted to ASCII will be allowed."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "data_preprocess_filtering(self, line, iter_i)",
            "docstring": "To be overridden with specific preprocessing/filtering behavior      if desired.      Returns a boolean of whether the line should be accepted and the      preprocessed text.      Runs prior to tokenization."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "data_postprocess_filtering(self, words, iter_i)",
            "docstring": "To be overridden with specific postprocessing/filtering behavior      if desired.      Returns a boolean of whether the line should be accepted and the      postprocessed text.      Runs after tokenization."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/word_generator.py",
            "function": "extract_valid_sentence_words(self, line)",
            "docstring": "Line may either a string of a list of strings depending on how      the stream is being parsed.      Domain-specific processing and filtering can be done both prior to      and after tokenization.      Custom information about the line can be extracted during the      processing phases and returned as a dict."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/DeepMoji-master/deepmoji/class_avg_finetuning.py",
            "function": "relabel(y, current_label_nr, nb_classes)",
            "docstring": "Makes a binary classification for a specific class in a    multi-class dataset.  # Arguments:    y: Outputs to be relabelled.    current_label_nr: Current label number.    nb_classes: Total number of classes.  # Returns:    Relabelled outputs of a given multi-class dataset into a binary    classification dataset."
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/app.py",
            "function": "index()",
            "docstring": "This the the landing page. It includes an upload and submit button  :return:"
        },
        {
            "filename": "/Users/harsh/Desktop/coding/mustard-website/app.py",
            "function": "emptydir()",
            "docstring": ":return:"
        }
    ]
}